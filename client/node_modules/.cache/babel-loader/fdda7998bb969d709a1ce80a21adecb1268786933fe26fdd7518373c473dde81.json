{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\Downloads\\\\wordle-spellwars\\\\src\\\\components\\\\SoloGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport \"./SoloGame.css\";\nimport wordList from \"../data/wordList.json\";\nimport MainMenu from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ATTEMPTS = 6;\nconst WORD_LENGTH = 5;\nconst STARTING_HP = 100;\nconst STARTING_TIME = 60;\nfunction generateWord(wordList) {\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\n}\nexport default function SoloGame({\n  selectedWizard,\n  username\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [currentAttempt, setCurrentAttempt] = useState(0);\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\n  const [hp, setHP] = useState(STARTING_HP);\n  const [timer, setTimer] = useState(STARTING_TIME);\n  const [message, setMessage] = useState(\"...\");\n  const [gameOver, setGameOver] = useState(false);\n  const [incorrectRows, setIncorrectRows] = useState([]);\n  const [spellVisible, setSpellVisible] = useState(false);\n  const [spellExploded, setSpellExploded] = useState(false);\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\n  const [spellsCast, setSpellsCast] = useState(0);\n  const [exit, setExit] = useState(false);\n  console.log(targetWord);\n  const resetRound = useCallback(success => {\n    if (hp <= 20 && !success) {\n      setGameOver(true);\n      setMessage(\"Game Over!\");\n      return;\n    }\n    setTimer(STARTING_TIME);\n    setCurrentAttempt(0);\n    setCurrentLetterIndex(0);\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setIncorrectRows([]);\n    setSpellVisible(false);\n    setSpellExploded(false);\n    setFizzleTriggered(false);\n    setTargetWord(generateWord(wordList));\n    if (!success) {\n      setMessage(\"...\");\n    }\n  }, [hp]);\n  const handleFizzle = useCallback(() => {\n    setMessage(\"Your Spell Fizzled!\");\n    setHP(prev => Math.max(prev - 20, 0));\n    setTimeout(() => resetRound(false), 500);\n  }, [resetRound]);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (gameOver) return;\n      const key = e.key.toUpperCase();\n      if (key === \"BACKSPACE\") {\n        handleBackspace();\n      } else if (key === \"ENTER\") {\n        handleSubmit();\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\n        handleLetterInput(key);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  });\n  useEffect(() => {\n    if (gameOver || fizzleTriggered) return;\n    const interval = setInterval(() => {\n      setTimer(prev => {\n        if (prev <= 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prev - 0.1;\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, [gameOver, fizzleTriggered]);\n\n  // Trigger Fizzle ONCE when timer hits 0\n  useEffect(() => {\n    if (timer <= 0 && !gameOver && !fizzleTriggered) {\n      setFizzleTriggered(true);\n      handleFizzle();\n    }\n  }, [timer, gameOver, fizzleTriggered, handleFizzle]);\n  useEffect(() => {\n    if (!spellVisible) return;\n    const explodeTimeout = setTimeout(() => {\n      setSpellExploded(true);\n    }, 750); // spell travel time\n\n    const cleanupTimeout = setTimeout(() => {\n      setSpellVisible(false);\n      setSpellExploded(false);\n      resetRound(true);\n    }, 750 + 425);\n    return () => {\n      clearTimeout(explodeTimeout);\n      clearTimeout(cleanupTimeout);\n    };\n  }, [spellVisible, resetRound]);\n  const handleLetterInput = letter => {\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex] = letter;\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev + 1);\n  };\n  const handleBackspace = () => {\n    if (currentLetterIndex === 0) return;\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev - 1);\n  };\n  const handleSubmit = () => {\n    const guess = board[currentAttempt].join(\"\");\n    if (guess.length < WORD_LENGTH) {\n      setMessage(\"Not enough letters!\");\n      return;\n    }\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\n    const targetLetters = targetWord.split(\"\");\n    for (let i = 0; i < WORD_LENGTH; i++) {\n      if (guess[i] === targetWord[i]) {\n        newColors[i] = \"green\";\n        targetLetters[i] = null;\n      }\n    }\n    for (let i = 0; i < WORD_LENGTH; i++) {\n      if (newColors[i] === \"green\") continue;\n      const index = targetLetters.indexOf(guess[i]);\n      if (index !== -1) {\n        newColors[i] = \"yellow\";\n        targetLetters[index] = null;\n      }\n    }\n    const newColorBoard = [...colors];\n    newColorBoard[currentAttempt] = newColors;\n    setColors(newColorBoard);\n    if (guess === targetWord) {\n      setSpellVisible(true);\n      //applyWizardEffect();\n      setMessage(`Spell Casted! ${selectedWizard.element}`);\n      setSpellsCast(prev => prev + 1);\n    } else {\n      setIncorrectRows([...incorrectRows, currentAttempt]);\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\n        handleFizzle();\n      } else {\n        setCurrentAttempt(prev => prev + 1);\n        setCurrentLetterIndex(0);\n      }\n    }\n  };\n\n  /*\r\n  const applyWizardEffect = () => {\r\n    if (selectedWizard === \"fire\") {\r\n      const bonusDamage = (MAX_ATTEMPTS - currentAttempt - 1) * 5;\r\n      setMessage(`🔥 Fire Bonus: +${bonusDamage} damage!`);\r\n      setTimeout(() => {\r\n        setHP((prev) => Math.max(prev - 20 - bonusDamage, 0));\r\n      }, 500);\r\n    } else if (selectedWizard === \"ice\") {\r\n      setMessage(\"❄️ Ice Bonus: +10s!\");\r\n      setTimer((prev) => prev + 10);\r\n    } else if (selectedWizard === \"nature\") {\r\n      setMessage(\"🌿 Nature Bonus: +10 HP!\");\r\n      setHP((prev) => Math.min(prev + 10, STARTING_HP));\r\n    } else {\r\n      setHP((prev) => Math.max(prev - 20, 0));\r\n    }\r\n  };\r\n  */\n\n  if (exit === true) {\n    setgameOver(true);\n    return /*#__PURE__*/_jsxDEV(MainMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solo-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spell-counter\",\n      children: [\"Spells Casted: \", spellsCast]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit\",\n      onClick: () => setExit(true),\n      children: \"Exit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"username\",\n          children: [username, \" - \", hp, \" HP\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${selectedWizard.img}`,\n            alt: \"Wizard\",\n            className: \"wizard-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: spellExploded ? \"./images/explode.png\" : selectedWizard.spell,\n            alt: \"Wizard-spell\",\n            className: `wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`,\n            style: {\n              visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `./images/dummy.png`,\n            alt: \"dummy\",\n            className: \"training-dummy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-bar-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-bar\",\n            style: {\n              width: `${timer / STARTING_TIME * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordle-board\",\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordle-row\",\n          children: [row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `wordle-tile ${colors[rowIndex][colIndex]}`,\n            children: letter\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"row-element\",\n            children: incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), gameOver]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(SoloGame, \"qm3ICl7iw5rHqWLBOKHObeoi61A=\");\n_c = SoloGame;\nvar _c;\n$RefreshReg$(_c, \"SoloGame\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","wordList","MainMenu","jsxDEV","_jsxDEV","MAX_ATTEMPTS","WORD_LENGTH","STARTING_HP","STARTING_TIME","generateWord","Math","floor","random","length","toUpperCase","SoloGame","selectedWizard","username","_s","board","setBoard","Array","fill","map","colors","setColors","currentAttempt","setCurrentAttempt","currentLetterIndex","setCurrentLetterIndex","targetWord","setTargetWord","hp","setHP","timer","setTimer","message","setMessage","gameOver","setGameOver","incorrectRows","setIncorrectRows","spellVisible","setSpellVisible","spellExploded","setSpellExploded","fizzleTriggered","setFizzleTriggered","spellsCast","setSpellsCast","exit","setExit","console","log","resetRound","success","handleFizzle","prev","max","setTimeout","handleKeyDown","e","key","handleBackspace","handleSubmit","test","handleLetterInput","window","addEventListener","removeEventListener","interval","setInterval","clearInterval","explodeTimeout","cleanupTimeout","clearTimeout","letter","newBoard","guess","join","newColors","targetLetters","split","i","index","indexOf","newColorBoard","element","setgameOver","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","src","img","alt","spell","style","visibility","width","row","rowIndex","colIndex","includes","_c","$RefreshReg$"],"sources":["C:/Users/thoma/Downloads/wordle-spellwars/src/components/SoloGame.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport \"./SoloGame.css\";\r\nimport wordList from \"../data/wordList.json\";\r\nimport MainMenu from \"../App\";\r\n\r\nconst MAX_ATTEMPTS = 6;\r\nconst WORD_LENGTH = 5;\r\nconst STARTING_HP = 100;\r\nconst STARTING_TIME = 60;\r\n\r\nfunction generateWord(wordList) {\r\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\r\n}\r\n\r\nexport default function SoloGame({ selectedWizard, username }) {\r\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [currentAttempt, setCurrentAttempt] = useState(0);\r\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\r\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\r\n  const [hp, setHP] = useState(STARTING_HP);\r\n  const [timer, setTimer] = useState(STARTING_TIME);\r\n  const [message, setMessage] = useState(\"...\");\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [incorrectRows, setIncorrectRows] = useState([]);\r\n  const [spellVisible, setSpellVisible] = useState(false);\r\n  const [spellExploded, setSpellExploded] = useState(false);\r\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\r\n  const [spellsCast, setSpellsCast] = useState(0);\r\n  const [exit, setExit] = useState(false);\r\n  \r\n  console.log(targetWord);\r\n\r\n  const resetRound = useCallback((success) => {\r\n    if (hp <= 20 && !success) {\r\n      setGameOver(true);\r\n      setMessage(\"Game Over!\");\r\n      return;\r\n    }\r\n  \r\n    setTimer(STARTING_TIME);\r\n    setCurrentAttempt(0);\r\n    setCurrentLetterIndex(0);\r\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setIncorrectRows([]);\r\n    setSpellVisible(false);\r\n    setSpellExploded(false);\r\n    setFizzleTriggered(false);\r\n    setTargetWord(generateWord(wordList));\r\n    if (!success) {\r\n      setMessage(\"...\");\r\n    }\r\n  }, [hp]);\r\n\r\n  const handleFizzle = useCallback(() => {\r\n    setMessage(\"Your Spell Fizzled!\");\r\n    setHP((prev) => Math.max(prev - 20, 0));\r\n    setTimeout(() => resetRound(false), 500);\r\n  }, [resetRound]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (gameOver) return;\r\n\r\n      const key = e.key.toUpperCase();\r\n      if (key === \"BACKSPACE\") {\r\n        handleBackspace();\r\n      } else if (key === \"ENTER\") {\r\n        handleSubmit();\r\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\r\n        handleLetterInput(key);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (gameOver || fizzleTriggered) return;\r\n  \r\n    const interval = setInterval(() => {\r\n      setTimer(prev => {\r\n        if (prev <= 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return prev - 0.1;\r\n      });\r\n    }, 100);\r\n  \r\n    return () => clearInterval(interval);\r\n  }, [gameOver, fizzleTriggered]);\r\n  \r\n  // Trigger Fizzle ONCE when timer hits 0\r\n  useEffect(() => {\r\n    if (timer <= 0 && !gameOver && !fizzleTriggered) {\r\n      setFizzleTriggered(true);\r\n      handleFizzle();\r\n    }\r\n  }, [timer, gameOver, fizzleTriggered, handleFizzle]);\r\n\r\n  useEffect(() => {\r\n    if (!spellVisible) return;\r\n\r\n    const explodeTimeout = setTimeout(() => {\r\n      setSpellExploded(true);\r\n    }, 750); // spell travel time\r\n  \r\n    const cleanupTimeout = setTimeout(() => {\r\n      setSpellVisible(false);\r\n      setSpellExploded(false);\r\n      resetRound(true);\r\n    }, 750 + 425); \r\n\r\n    return () => {\r\n      clearTimeout(explodeTimeout);\r\n      clearTimeout(cleanupTimeout);\r\n    };\r\n  }, [spellVisible, resetRound]);\r\n\r\n  const handleLetterInput = (letter) => {\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex] = letter;\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev + 1);\r\n  };\r\n\r\n  const handleBackspace = () => {\r\n    if (currentLetterIndex === 0) return;\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev - 1);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const guess = board[currentAttempt].join(\"\");\r\n    if (guess.length < WORD_LENGTH) {\r\n      setMessage(\"Not enough letters!\");\r\n      return;\r\n    }\r\n\r\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\r\n    const targetLetters = targetWord.split(\"\");\r\n\r\n    for (let i = 0; i < WORD_LENGTH; i++) {\r\n      if (guess[i] === targetWord[i]) {\r\n        newColors[i] = \"green\";\r\n        targetLetters[i] = null;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < WORD_LENGTH; i++) {\r\n      if (newColors[i] === \"green\") continue;\r\n      const index = targetLetters.indexOf(guess[i]);\r\n      if (index !== -1) {\r\n        newColors[i] = \"yellow\";\r\n        targetLetters[index] = null;\r\n      }\r\n    }\r\n\r\n    const newColorBoard = [...colors];\r\n    newColorBoard[currentAttempt] = newColors;\r\n    setColors(newColorBoard);\r\n\r\n    if (guess === targetWord) {\r\n      setSpellVisible(true);\r\n      //applyWizardEffect();\r\n      setMessage(`Spell Casted! ${selectedWizard.element}`);\r\n      setSpellsCast((prev) => prev + 1);\r\n    } else {\r\n      setIncorrectRows([...incorrectRows, currentAttempt]);\r\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\r\n        handleFizzle();\r\n      } else {\r\n        setCurrentAttempt((prev) => prev + 1);\r\n        setCurrentLetterIndex(0);\r\n      }\r\n    } \r\n  };\r\n\r\n  /*\r\n  const applyWizardEffect = () => {\r\n    if (selectedWizard === \"fire\") {\r\n      const bonusDamage = (MAX_ATTEMPTS - currentAttempt - 1) * 5;\r\n      setMessage(`🔥 Fire Bonus: +${bonusDamage} damage!`);\r\n      setTimeout(() => {\r\n        setHP((prev) => Math.max(prev - 20 - bonusDamage, 0));\r\n      }, 500);\r\n    } else if (selectedWizard === \"ice\") {\r\n      setMessage(\"❄️ Ice Bonus: +10s!\");\r\n      setTimer((prev) => prev + 10);\r\n    } else if (selectedWizard === \"nature\") {\r\n      setMessage(\"🌿 Nature Bonus: +10 HP!\");\r\n      setHP((prev) => Math.min(prev + 10, STARTING_HP));\r\n    } else {\r\n      setHP((prev) => Math.max(prev - 20, 0));\r\n    }\r\n  };\r\n  */\r\n  \r\n  if (exit === true) { \r\n    setgameOver(true);\r\n    return <MainMenu/>;\r\n  }\r\n  return (\r\n    <div className=\"solo-game-container\">\r\n\r\n      <div className=\"spell-counter\">Spells Casted: {spellsCast}</div>\r\n      <button className=\"exit\" onClick={() => setExit(true)}>Exit</button>\r\n      <div className=\"game-box\">\r\n        <div className=\"status-header\">\r\n          <p className=\"username\">{username} - {hp} HP</p>\r\n          <div className =\"banner\">\r\n            <img src={`${selectedWizard.img}`} alt=\"Wizard\" className=\"wizard-icon\" />\r\n            <img\r\n              src={spellExploded ? \"./images/explode.png\" : selectedWizard.spell} alt=\"Wizard-spell\"\r\n              className={`wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`}\r\n              style={{ visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\" }}\r\n            />\r\n            <img src={`./images/dummy.png`} alt=\"dummy\" className=\"training-dummy\" />\r\n          </div>\r\n          <div className=\"timer-bar-container\">\r\n            <div className=\"timer-bar\" style={{ width: `${(timer / STARTING_TIME) * 100}%` }} />\r\n          </div>\r\n        </div>\r\n  \r\n        <div className=\"wordle-board\">\r\n          {board.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"wordle-row\">\r\n              {row.map((letter, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`wordle-tile ${colors[rowIndex][colIndex]}`}\r\n                >\r\n                  {letter}\r\n                </div>\r\n              ))}\r\n              <span className=\"row-element\">\r\n                {incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n  \r\n        <p className=\"message\">{message}</p>\r\n  \r\n        {gameOver}\r\n      </div>\r\n    </div>\r\n  );\r\n}  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}