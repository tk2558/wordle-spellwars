{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\Downloads\\\\wordle-spellwars\\\\client\\\\src\\\\components\\\\pvpGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\nimport \"./gameplay.css\";\nimport wordList from \"../data/wordList.json\";\nimport { socket } from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ATTEMPTS = 6;\nconst WORD_LENGTH = 5;\nconst STARTING_HP = 100;\nconst STARTING_TIME = 60;\nfunction generateWord(wordList) {\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\n}\nexport default function PvPGame({\n  selectedWizard,\n  username,\n  onExit,\n  roomId\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [currentAttempt, setCurrentAttempt] = useState(0);\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\n  const [enemyhp, setEnemyHP] = useState(STARTING_HP);\n  const [opponentUsername, setOpponentUsername] = useState(null);\n  const [opponentReady, setOpponentReady] = useState(false);\n  const [enemyWizardImage, setEnemyWizardImage] = useState(\"./images/loading.png\");\n  const [enemyWizardImageMini, setEnemyWizardImageMini] = useState(\"./images/training.png\");\n  const [enemySpell, setEnemySpell] = useState(null);\n  const [enemySpellVisible, setEnemySpellVisible] = useState(false);\n  const [enemySpellExploded, setEnemySpellExploded] = useState(false);\n  const [frozenStatus, setFrozenStatus] = useState(false);\n  const imgRef = useRef(null);\n  const [hp, setHP] = useState(STARTING_HP);\n  const [timer, setTimer] = useState(STARTING_TIME);\n  const [message, setMessage] = useState(\"...\");\n  const [incorrectRows, setIncorrectRows] = useState([]);\n  const [spellVisible, setSpellVisible] = useState(false);\n  const [spellExploded, setSpellExploded] = useState(false);\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\n  const [letterStatuses, setLetterStatuses] = useState({});\n  const [empowering, setEmpowering] = useState(false);\n  const elementRefs = useRef([]);\n  const wizardRef = useRef(null);\n  const gameBoxRef = useRef(null);\n  const bgmRef = useRef(null);\n  const empowerSound = useRef(null);\n  const explodeSound = useRef(null);\n  const fizzleSound = useRef(null);\n  const [ready, setReady] = useState(false);\n  const [gameStart, setGameStart] = useState(false);\n  const readyBtnRef = useRef(null);\n  const msgRef = useRef(null);\n  const handleReady = () => {\n    setReady(prev => !prev);\n    socket.emit('setPlayerReady', ready, roomId, () => {\n      setHP(STARTING_HP);\n      setTimer(STARTING_TIME);\n      resetRound(true);\n    });\n  };\n  const keyboardRows = useMemo(() => [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], [\"Enter\", 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '✖️']], []);\n\n  //console.log(targetWord);\n\n  const resetRound = useCallback(success => {\n    setTimer(STARTING_TIME);\n    setCurrentAttempt(0);\n    setCurrentLetterIndex(0);\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setIncorrectRows([]);\n    setSpellVisible(false);\n    setSpellExploded(false);\n    setFizzleTriggered(false);\n    setTargetWord(generateWord(wordList));\n    setLetterStatuses({});\n    if (success) {\n      elementRefs.current.forEach(el => {\n        if (!el) return;\n        const wizardRect = wizardRef.current.getBoundingClientRect();\n        const elRect = el.getBoundingClientRect();\n        const dx = wizardRect.left - elRect.left;\n        const dy = wizardRect.top - elRect.top;\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.opacity = \"1\";\n      });\n      wizardRef.current.src = `${selectedWizard.gif}`;\n    }\n  }, [selectedWizard]);\n  const triggerDamageAnimation = () => {\n    if (!gameBoxRef.current) return;\n    gameBoxRef.current.classList.remove('takeDMG');\n    void gameBoxRef.current.offsetWidth;\n    gameBoxRef.current.classList.add('takeDMG');\n    gameBoxRef.current.addEventListener('animationend', () => {\n      gameBoxRef.current.classList.remove('takeDMG');\n    }, {\n      once: true\n    });\n  };\n  const handleFizzle = useCallback(() => {\n    setMessage(\"Spell Fizzled! Cast a New One!\");\n    fizzleSound.current.play();\n    setHP(prev => Math.max(prev - 10, 0)); // Fizzle Recoil\n    socket.emit('recoil', roomId, () => {});\n    triggerDamageAnimation();\n    setTimeout(() => resetRound(false), 500);\n  }, [resetRound, fizzleSound, roomId]);\n  useEffect(() => {\n    // Keyboard\n    const handleKeyDown = e => {\n      if (!gameStart || frozenStatus) {\n        return;\n      }\n      const key = e.key.toUpperCase();\n      if (key === \"BACKSPACE\") {\n        handleBackspace();\n      } else if (key === \"ENTER\") {\n        handleSubmit();\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\n        handleLetterInput(key);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  });\n  useEffect(() => {\n    // Socket\n    socket.on('opponentInfo', enemy => {\n      setOpponentUsername(enemy.username);\n      setEnemyWizardImage(enemy.wizard.img);\n      setEnemyWizardImageMini(enemy.wizard.cast);\n      setEnemySpell(enemy.wizard.spell);\n      imgRef.current.style.display = 'inline';\n      readyBtnRef.current.style.display = 'inline';\n    });\n    socket.on('opponentReady', ready => {\n      setOpponentReady(ready);\n    });\n    socket.on('bothPlayersReady', () => {\n      //console.log(\"GAME STARTED!\")\n      setHP(STARTING_HP);\n      setTimer(STARTING_TIME);\n      setEnemyHP(STARTING_HP);\n      readyBtnRef.current.style.display = 'none';\n      msgRef.current.style.display = 'inline';\n      setMessage(\"Game Start!\");\n      setGameStart(true);\n    });\n    socket.on('takeDmg', (dmg, selectedWizardId) => {\n      setHP(prev => prev - dmg);\n      setEnemySpellVisible(true);\n      if (selectedWizardId === \"nature-mage\") {\n        setMessage(\"Enemy Healed 10 HP!\");\n        setEnemyHP(prev => prev + 10);\n      } else if (selectedWizardId === \"ice-mage\") {\n        setMessage(\"Enemy Froze you for 8 seconds!\");\n        setFrozenStatus(true);\n        setTimeout(() => {\n          setFrozenStatus(false);\n        }, 8000);\n      } else if (selectedWizardId === \"death-mage\") {\n        setMessage(\"Enemy halved your time!\");\n        setTimer(prev => prev / 2);\n      } else {\n        setMessage(`Enemy dealt ${dmg} to you!`);\n      }\n    });\n    socket.on('GameDone', Winner => {\n      //console.log(\"GAME ENDED!\")\n      setGameStart(false);\n      socket.emit('resetGame', roomId, () => {});\n      setMessage(`Game Over! Winner: ${Winner}!`);\n      setReady(false);\n      readyBtnRef.current.style.display = 'inline';\n      readyBtnRef.current.backgroundColor = '#444';\n    });\n    socket.on('playerLeft', () => {\n      setGameStart(false);\n      socket.emit('resetGame', roomId, () => {});\n      setMessage(`Opponent Left! You Win!`);\n      setReady(false);\n      setOpponentUsername(null);\n      setEnemyWizardImage(\"./images/loading.png\");\n      imgRef.current.style.display = 'none';\n      readyBtnRef.current.style.display = 'none';\n    });\n    return () => {\n      socket.off('opponentInfo');\n      socket.off('opponentReady');\n      socket.off('bothPlayersReady');\n      socket.off('takeDmg');\n      socket.off('GameDone');\n      socket.off('playerLeft');\n    };\n  }, [roomId, hp, ready, resetRound]);\n  useEffect(() => {\n    // Sound Effects\n    empowerSound.current = new Audio('./audio/empower.wav');\n    explodeSound.current = new Audio('./audio/explosion.wav');\n    fizzleSound.current = new Audio('./audio/fizzle.wav');\n    fizzleSound.current.volume = .1;\n  }, [empowerSound, explodeSound, fizzleSound]);\n  useEffect(() => {\n    // Timer\n    if (fizzleTriggered || spellVisible || !gameStart) return;\n    const interval = setInterval(() => {\n      setTimer(prev => {\n        if (prev <= 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prev - 0.1;\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, [fizzleTriggered, spellVisible, gameStart]);\n  useEffect(() => {\n    // Trigger Fizzle ONCE when timer hits 0\n    if (timer <= 0 && gameStart && !fizzleTriggered) {\n      setFizzleTriggered(true);\n      handleFizzle();\n    }\n  }, [timer, gameStart, fizzleTriggered, handleFizzle]);\n  useEffect(() => {\n    // Spell Casted\n    if (!spellVisible) return;\n    let dmg = 20; // base dmg\n\n    if (selectedWizard.id === \"fire-mage\") {\n      elementRefs.current.forEach(el => {\n        if (el.textContent === \"🔥\") {\n          dmg += 2;\n        }\n      });\n    } else if (selectedWizard.id === \"nature-mage\") {\n      setHP(prev => prev + 10);\n    } else if (selectedWizard.id === \"lightning-mage\") {\n      dmg += Math.ceil(timer / 4);\n    } else if (selectedWizard.id === \"ocean-mage\") {\n      dmg += 5;\n    }\n    socket.emit('dealDmg', roomId, dmg, selectedWizard.id, () => {});\n    const explodeTimeout = setTimeout(() => {\n      setSpellExploded(true);\n      explodeSound.current.play();\n      setEnemyHP(prev => prev - dmg);\n    }, 750); // spell travel time\n\n    const cleanupTimeout = setTimeout(() => {\n      setSpellVisible(false);\n      setSpellExploded(false);\n      resetRound(true);\n    }, 750 + 425);\n    return () => {\n      clearTimeout(explodeTimeout);\n      clearTimeout(cleanupTimeout);\n    };\n  }, [spellVisible, resetRound, explodeSound, selectedWizard, roomId, timer]);\n  useEffect(() => {\n    // Enemy Spell Casted\n    if (!enemySpellVisible) return;\n    const enemyExplodeTimeout = setTimeout(() => {\n      setEnemySpellExploded(true);\n      explodeSound.current.play();\n      triggerDamageAnimation();\n    }, 750);\n    const enemyCleanupTimeout = setTimeout(() => {\n      setEnemySpellVisible(false);\n      setEnemySpellExploded(false);\n    }, 750 + 425);\n    return () => {\n      clearTimeout(enemyExplodeTimeout);\n      clearTimeout(enemyCleanupTimeout);\n    };\n  }, [enemySpellVisible, explodeSound]);\n  useEffect(() => {\n    // Empower Spell\n    if (empowering) {\n      elementRefs.current.forEach(el => {\n        if (!el) return; // el.textContent === \"❌\" to get remaining attempts\n        const wizardRect = wizardRef.current.getBoundingClientRect();\n        const elRect = el.getBoundingClientRect();\n        const dx = wizardRect.left - elRect.left;\n        const dy = wizardRect.top - elRect.top;\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.opacity = \"0\";\n      });\n      empowerSound.current.play();\n    }\n  }, [empowering, empowerSound]);\n  useEffect(() => {\n    // BGM\n    bgmRef.current = new Audio('./audio/bgm.wav');\n    bgmRef.current.loop = true;\n    bgmRef.current.volume = 0.05;\n    bgmRef.current.play().catch(e => {\n      console.log(e);\n    });\n    return () => {\n      // reset when exiting solo\n      bgmRef.current.pause();\n      bgmRef.current.currentTime = 0;\n    };\n  }, [bgmRef]);\n  const handleLetterInput = letter => {\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex] = letter;\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev + 1);\n  };\n  const handleBackspace = () => {\n    if (currentLetterIndex === 0) return;\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev - 1);\n  };\n  const handleSubmit = () => {\n    const newStatuses = {\n      ...letterStatuses\n    };\n    const guess = board[currentAttempt].join(\"\");\n    if (guess.length < WORD_LENGTH) {\n      setMessage(\"Not enough letters!\");\n      return;\n    }\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\n    const targetLetters = targetWord.split(\"\");\n    for (let i = 0; i < WORD_LENGTH; i++) {\n      if (guess[i] === targetWord[i]) {\n        newColors[i] = \"green\";\n        newStatuses[guess[i]] = 'correct';\n        targetLetters[i] = null;\n        continue;\n      }\n      const index = targetLetters.indexOf(guess[i]);\n      if (index !== -1) {\n        newColors[i] = \"yellow\";\n        targetLetters[index] = null;\n        if (newStatuses[guess[i]] === 'correct') {\n          continue;\n        } else {\n          newStatuses[guess[i]] = 'present';\n        }\n        ;\n      } else {\n        newStatuses[guess[i]] = 'absent';\n      }\n    }\n    const newColorBoard = [...colors];\n    newColorBoard[currentAttempt] = newColors;\n    setColors(newColorBoard);\n    setLetterStatuses(newStatuses);\n    if (guess === targetWord) {\n      setEmpowering(true);\n      wizardRef.current.src = `${selectedWizard.cast}`;\n      setTimeout(() => {\n        setEmpowering(false);\n        setSpellVisible(true);\n        setMessage(`Spell Successfully Casted! ${selectedWizard.element}`);\n      }, 600);\n    } else {\n      setIncorrectRows([...incorrectRows, currentAttempt]);\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\n        handleFizzle();\n      } else {\n        setCurrentAttempt(prev => prev + 1);\n        setCurrentLetterIndex(0);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solo-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-counter\",\n        children: [\"Room Id: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"exit\",\n        onClick: onExit,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"username\",\n            ref: gameBoxRef,\n            children: [username, \" - \", hp, \" HP\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"readyBtn\",\n            ref: readyBtnRef,\n            style: {\n              display: \"none\",\n              backgroundColor: ready ? '#6aaa64' : '#444'\n            },\n            onClick: handleReady,\n            children: \"Ready\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message\",\n            ref: msgRef,\n            style: {\n              display: `none`\n            },\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${selectedWizard.gif}`,\n              alt: \"Wizard\",\n              className: \"wizard-icon\",\n              ref: wizardRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: spellExploded ? \"./images/explode.png\" : selectedWizard.spell,\n              alt: \"Wizard-spell\",\n              className: `wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`,\n              style: {\n                visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: enemyWizardImageMini,\n              ref: imgRef,\n              alt: \"dummy\",\n              className: \"training-dummy\",\n              style: {\n                display: `none`,\n                transform: `ScaleX(-1)`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: enemySpellExploded ? \"./images/explode.png\" : enemySpell,\n              alt: \"Wizard-spell-enemy\",\n              className: `enemy-spell ${enemySpellVisible ? \"enemy-spell-active\" : \"\"}`,\n              style: {\n                visibility: enemySpellVisible || enemySpellExploded ? \"visible\" : \"hidden\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `timer-bar ${timer <= 10 ? \"danger\" : timer <= 30 ? \"warning\" : \"\"}`,\n              style: {\n                width: `${timer / STARTING_TIME * 100}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordle-board\",\n          children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wordle-row\",\n            children: [row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `wordle-tile ${colors[rowIndex][colIndex]}`,\n              children: letter\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              ref: el => elementRefs.current[rowIndex] = el,\n              className: `row-element ${empowering && rowIndex > currentAttempt ? \"empowering-icon\" : \"\"}`,\n              children: incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this)]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", gameStart ? `${opponentUsername} - ${enemyhp} HP` : opponentUsername ? `${opponentUsername} - ${opponentReady ? \"Ready\" : \"Not Ready\"}` : \"Waiting for another player...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: enemyWizardImage,\n          alt: \"Enemy-Dummy\",\n          className: \"enemy-image\",\n          style: {\n            transform: `ScaleX(-1)`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"./images/explode.png\",\n          alt: \"Enemy-explode\",\n          className: \"explosion\",\n          style: {\n            visibility: spellExploded ? \"visible\" : \"hidden\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enemy-health-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"enemy-hp\",\n            style: {\n              width: `${enemyhp / STARTING_HP * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keyboard-preview\",\n          children: keyboardRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"keyboard-row\",\n            children: row.map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `key ${letterStatuses[letter] || ''}`,\n              disabled: true,\n              children: letter\n            }, letter, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 19\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n}\n_s(PvPGame, \"S5XvlW9Q4pgRMNXNARC+1nD6YOw=\");\n_c = PvPGame;\nvar _c;\n$RefreshReg$(_c, \"PvPGame\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useMemo","wordList","socket","jsxDEV","_jsxDEV","MAX_ATTEMPTS","WORD_LENGTH","STARTING_HP","STARTING_TIME","generateWord","Math","floor","random","length","toUpperCase","PvPGame","selectedWizard","username","onExit","roomId","_s","board","setBoard","Array","fill","map","colors","setColors","currentAttempt","setCurrentAttempt","currentLetterIndex","setCurrentLetterIndex","targetWord","setTargetWord","enemyhp","setEnemyHP","opponentUsername","setOpponentUsername","opponentReady","setOpponentReady","enemyWizardImage","setEnemyWizardImage","enemyWizardImageMini","setEnemyWizardImageMini","enemySpell","setEnemySpell","enemySpellVisible","setEnemySpellVisible","enemySpellExploded","setEnemySpellExploded","frozenStatus","setFrozenStatus","imgRef","hp","setHP","timer","setTimer","message","setMessage","incorrectRows","setIncorrectRows","spellVisible","setSpellVisible","spellExploded","setSpellExploded","fizzleTriggered","setFizzleTriggered","letterStatuses","setLetterStatuses","empowering","setEmpowering","elementRefs","wizardRef","gameBoxRef","bgmRef","empowerSound","explodeSound","fizzleSound","ready","setReady","gameStart","setGameStart","readyBtnRef","msgRef","handleReady","prev","emit","resetRound","keyboardRows","success","current","forEach","el","wizardRect","getBoundingClientRect","elRect","dx","left","dy","top","style","transform","opacity","src","gif","triggerDamageAnimation","classList","remove","offsetWidth","add","addEventListener","once","handleFizzle","play","max","setTimeout","handleKeyDown","e","key","handleBackspace","handleSubmit","test","handleLetterInput","window","removeEventListener","on","enemy","wizard","img","cast","spell","display","dmg","selectedWizardId","Winner","backgroundColor","off","Audio","volume","interval","setInterval","clearInterval","id","textContent","ceil","explodeTimeout","cleanupTimeout","clearTimeout","enemyExplodeTimeout","enemyCleanupTimeout","loop","catch","console","log","pause","currentTime","letter","newBoard","newStatuses","guess","join","newColors","targetLetters","split","i","index","indexOf","newColorBoard","element","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","alt","visibility","width","row","rowIndex","colIndex","includes","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thoma/Downloads/wordle-spellwars/client/src/components/pvpGame.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\r\nimport \"./gameplay.css\";\r\nimport wordList from \"../data/wordList.json\";\r\nimport { socket } from '../socket';\r\n\r\nconst MAX_ATTEMPTS = 6;\r\nconst WORD_LENGTH = 5;\r\nconst STARTING_HP = 100;\r\nconst STARTING_TIME = 60;\r\n\r\nfunction generateWord(wordList) {\r\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\r\n}\r\n\r\nexport default function PvPGame({ selectedWizard, username, onExit, roomId }) {\r\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [currentAttempt, setCurrentAttempt] = useState(0);\r\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\r\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\r\n\r\n  const [enemyhp, setEnemyHP] = useState(STARTING_HP);\r\n  const [opponentUsername, setOpponentUsername] = useState(null);\r\n  const [opponentReady, setOpponentReady] = useState(false);\r\n\r\n  const [enemyWizardImage, setEnemyWizardImage] = useState(\"./images/loading.png\");\r\n  const [enemyWizardImageMini, setEnemyWizardImageMini] = useState(\"./images/training.png\");\r\n  const [enemySpell, setEnemySpell] = useState(null);\r\n  const [enemySpellVisible, setEnemySpellVisible] = useState(false);\r\n  const [enemySpellExploded, setEnemySpellExploded] = useState(false);\r\n  const [frozenStatus, setFrozenStatus] = useState(false);\r\n\r\n  const imgRef = useRef(null);\r\n\r\n  const [hp, setHP] = useState(STARTING_HP);\r\n  const [timer, setTimer] = useState(STARTING_TIME);\r\n  const [message, setMessage] = useState(\"...\");\r\n  const [incorrectRows, setIncorrectRows] = useState([]);\r\n\r\n  const [spellVisible, setSpellVisible] = useState(false);\r\n  const [spellExploded, setSpellExploded] = useState(false);\r\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\r\n  const [letterStatuses, setLetterStatuses] = useState({}); \r\n\r\n  const [empowering, setEmpowering] = useState(false);\r\n  const elementRefs = useRef([]);\r\n  const wizardRef = useRef(null);\r\n  const gameBoxRef = useRef(null);\r\n\r\n  const bgmRef = useRef(null);\r\n  const empowerSound = useRef(null);\r\n  const explodeSound = useRef(null);\r\n  const fizzleSound = useRef(null);\r\n  \r\n  const [ready, setReady] = useState(false);\r\n  const [gameStart, setGameStart] = useState(false);\r\n  const readyBtnRef = useRef(null);\r\n  const msgRef = useRef(null);\r\n\r\n  const handleReady = () => {\r\n    setReady((prev) => !prev);\r\n    socket.emit('setPlayerReady', ready, roomId, () => {\r\n      setHP(STARTING_HP);\r\n      setTimer(STARTING_TIME);\r\n      resetRound(true);\r\n    }); \r\n  };\r\n\r\n  const keyboardRows = useMemo(() => [\r\n    ['Q','W','E','R','T','Y','U','I','O','P'],\r\n    ['A','S','D','F','G','H','J','K','L'],\r\n    [\"Enter\", 'Z','X','C','V','B','N','M', '✖️']\r\n  ], []);\r\n  \r\n  //console.log(targetWord);\r\n\r\n  const resetRound = useCallback((success) => {\r\n    setTimer(STARTING_TIME);\r\n    setCurrentAttempt(0);\r\n    setCurrentLetterIndex(0);\r\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setIncorrectRows([]);\r\n    setSpellVisible(false);\r\n    setSpellExploded(false);\r\n    setFizzleTriggered(false);\r\n    setTargetWord(generateWord(wordList));\r\n    setLetterStatuses({});\r\n\r\n    if (success) {\r\n      elementRefs.current.forEach((el) => {\r\n        if (!el) return;\r\n        const wizardRect = wizardRef.current.getBoundingClientRect();\r\n        const elRect = el.getBoundingClientRect();\r\n        const dx = wizardRect.left - elRect.left;\r\n        const dy = wizardRect.top - elRect.top;\r\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\r\n        el.style.opacity = \"1\";\r\n      });\r\n      wizardRef.current.src = `${selectedWizard.gif}`\r\n    }\r\n  }, [selectedWizard]);\r\n\r\n  const triggerDamageAnimation = () => {\r\n    if (!gameBoxRef.current) return;\r\n    gameBoxRef.current.classList.remove('takeDMG');\r\n    void gameBoxRef.current.offsetWidth; \r\n\r\n    gameBoxRef.current.classList.add('takeDMG');\r\n    gameBoxRef.current.addEventListener('animationend', () => {\r\n      gameBoxRef.current.classList.remove('takeDMG');\r\n    }, { once: true });\r\n  };\r\n\r\n  const handleFizzle = useCallback(() => {\r\n    setMessage(\"Spell Fizzled! Cast a New One!\");\r\n    fizzleSound.current.play();\r\n    setHP((prev) => Math.max(prev - 10, 0)); // Fizzle Recoil\r\n    socket.emit('recoil', roomId, () => {}); \r\n    triggerDamageAnimation();\r\n    setTimeout(() => resetRound(false), 500);\r\n  }, [resetRound, fizzleSound, roomId]);\r\n\r\n  useEffect(() => { // Keyboard\r\n    const handleKeyDown = (e) => {\r\n      if (!gameStart || frozenStatus) { return; }\r\n      const key = e.key.toUpperCase();\r\n      if (key === \"BACKSPACE\") {\r\n        handleBackspace();\r\n      } else if (key === \"ENTER\") {\r\n        handleSubmit();\r\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\r\n        handleLetterInput(key);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  });\r\n\r\n  useEffect(() => { // Socket\r\n    socket.on('opponentInfo', (enemy) => {\r\n      setOpponentUsername(enemy.username);\r\n      setEnemyWizardImage(enemy.wizard.img);\r\n      setEnemyWizardImageMini(enemy.wizard.cast);\r\n      setEnemySpell(enemy.wizard.spell);\r\n      imgRef.current.style.display = 'inline';\r\n      readyBtnRef.current.style.display = 'inline';\r\n    });\r\n\r\n    socket.on('opponentReady', (ready) => { setOpponentReady(ready); });\r\n\r\n    socket.on('bothPlayersReady', () => {\r\n      //console.log(\"GAME STARTED!\")\r\n      setHP(STARTING_HP);\r\n      setTimer(STARTING_TIME);\r\n      setEnemyHP(STARTING_HP);\r\n      readyBtnRef.current.style.display = 'none';\r\n      msgRef.current.style.display = 'inline';\r\n      setMessage(\"Game Start!\");\r\n      setGameStart(true);\r\n    });\r\n\r\n    socket.on('takeDmg', (dmg, selectedWizardId) => { \r\n      setHP((prev) => prev - dmg);\r\n      setEnemySpellVisible(true);\r\n      if (selectedWizardId === \"nature-mage\") { \r\n        setMessage(\"Enemy Healed 10 HP!\");\r\n        setEnemyHP(prev => prev + 10); \r\n      }\r\n      else if (selectedWizardId === \"ice-mage\") {\r\n        setMessage(\"Enemy Froze you for 8 seconds!\");\r\n        setFrozenStatus(true); \r\n        setTimeout(() => {\r\n          setFrozenStatus(false); \r\n        }, 8000);\r\n      }\r\n      else if (selectedWizardId === \"death-mage\") { \r\n        setMessage(\"Enemy halved your time!\");\r\n        setTimer(prev => prev/2); \r\n      }\r\n      else { setMessage(`Enemy dealt ${dmg} to you!`);}\r\n    });\r\n\r\n    socket.on('GameDone', (Winner) => {\r\n      //console.log(\"GAME ENDED!\")\r\n      setGameStart(false);\r\n      socket.emit('resetGame', roomId, () => {}); \r\n      setMessage(`Game Over! Winner: ${Winner}!`); \r\n\r\n      setReady(false);\r\n      readyBtnRef.current.style.display = 'inline';\r\n      readyBtnRef.current.backgroundColor = '#444';\r\n    });\r\n    socket.on('playerLeft', () => {       \r\n      setGameStart(false);       \r\n      socket.emit('resetGame', roomId, () => {});        \r\n      setMessage(`Opponent Left! You Win!`);         \r\n      setReady(false);\r\n\r\n      setOpponentUsername(null);       \r\n      setEnemyWizardImage(\"./images/loading.png\");       \r\n      imgRef.current.style.display = 'none';\r\n      readyBtnRef.current.style.display = 'none';\r\n    });\r\n\r\n    return () => {\r\n      socket.off('opponentInfo');\r\n      socket.off('opponentReady');\r\n      socket.off('bothPlayersReady');\r\n      socket.off('takeDmg');\r\n      socket.off('GameDone');\r\n      socket.off('playerLeft');\r\n    };\r\n  }, [roomId, hp, ready, resetRound]);\r\n\r\n  useEffect(() => { // Sound Effects\r\n    empowerSound.current = new Audio('./audio/empower.wav');\r\n    explodeSound.current = new Audio('./audio/explosion.wav');\r\n    fizzleSound.current = new Audio('./audio/fizzle.wav');\r\n    fizzleSound.current.volume = .1;\r\n  }, [empowerSound, explodeSound, fizzleSound]);\r\n\r\n  useEffect(() => { // Timer\r\n    if (fizzleTriggered || spellVisible || !gameStart) return;\r\n    const interval = setInterval(() => {\r\n      setTimer(prev => {\r\n        if (prev <= 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return prev - 0.1;\r\n      });\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [fizzleTriggered, spellVisible, gameStart]);\r\n  \r\n  useEffect(() => { // Trigger Fizzle ONCE when timer hits 0\r\n    if (timer <= 0 && gameStart && !fizzleTriggered) {\r\n      setFizzleTriggered(true);\r\n      handleFizzle();\r\n    }\r\n  }, [timer, gameStart, fizzleTriggered, handleFizzle]);\r\n\r\n  useEffect(() => { // Spell Casted\r\n    if (!spellVisible) return;\r\n    let dmg = 20; // base dmg\r\n\r\n    if (selectedWizard.id === \"fire-mage\") { elementRefs.current.forEach((el) => { if (el.textContent === \"🔥\") { dmg += 2; } }); }\r\n    else if (selectedWizard.id === \"nature-mage\") { setHP(prev => prev + 10); }\r\n    else if (selectedWizard.id === \"lightning-mage\") { dmg += Math.ceil(timer / 4); }\r\n    else if (selectedWizard.id === \"ocean-mage\") { dmg += 5; }\r\n\r\n    socket.emit('dealDmg', roomId, dmg, selectedWizard.id, () => {}); \r\n    const explodeTimeout = setTimeout(() => {\r\n      setSpellExploded(true);\r\n      explodeSound.current.play();\r\n      setEnemyHP((prev) => prev - dmg);\r\n    }, 750); // spell travel time\r\n  \r\n    const cleanupTimeout = setTimeout(() => {\r\n      setSpellVisible(false);\r\n      setSpellExploded(false);\r\n      resetRound(true);\r\n    }, 750 + 425); \r\n\r\n    return () => {\r\n      clearTimeout(explodeTimeout);\r\n      clearTimeout(cleanupTimeout);\r\n    };\r\n  }, [spellVisible, resetRound, explodeSound, selectedWizard, roomId, timer]);\r\n\r\n  useEffect(() => { // Enemy Spell Casted\r\n    if (!enemySpellVisible) return;\r\n    const enemyExplodeTimeout = setTimeout(() => {\r\n      setEnemySpellExploded(true);\r\n      explodeSound.current.play();\r\n      triggerDamageAnimation(); \r\n    }, 750);\r\n  \r\n    const enemyCleanupTimeout = setTimeout(() => {\r\n      setEnemySpellVisible(false);\r\n      setEnemySpellExploded(false);\r\n    }, 750 + 425); \r\n\r\n    return () => {\r\n      clearTimeout(enemyExplodeTimeout);\r\n      clearTimeout(enemyCleanupTimeout);\r\n    };\r\n  }, [enemySpellVisible, explodeSound]);\r\n\r\n  useEffect(() => { // Empower Spell\r\n    if (empowering) {\r\n      elementRefs.current.forEach((el) => {\r\n        if (!el) return; // el.textContent === \"❌\" to get remaining attempts\r\n        const wizardRect = wizardRef.current.getBoundingClientRect();\r\n        const elRect = el.getBoundingClientRect();\r\n  \r\n        const dx = wizardRect.left - elRect.left;\r\n        const dy = wizardRect.top - elRect.top;\r\n\r\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\r\n        el.style.opacity = \"0\";\r\n      });\r\n      empowerSound.current.play();\r\n    }\r\n  }, [empowering, empowerSound]);\r\n\r\n  useEffect(() => { // BGM\r\n    bgmRef.current = new Audio('./audio/bgm.wav');\r\n    bgmRef.current.loop = true;\r\n    bgmRef.current.volume = 0.05; \r\n    bgmRef.current.play().catch((e) => {console.log(e);});\r\n    return () => { // reset when exiting solo\r\n      bgmRef.current.pause();\r\n      bgmRef.current.currentTime = 0; \r\n    };\r\n  }, [bgmRef]);\r\n\r\n  const handleLetterInput = (letter) => {\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex] = letter;\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev + 1);\r\n  };\r\n\r\n  const handleBackspace = () => {\r\n    if (currentLetterIndex === 0) return;\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev - 1);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newStatuses = { ...letterStatuses };\r\n    const guess = board[currentAttempt].join(\"\");\r\n    if (guess.length < WORD_LENGTH) {\r\n      setMessage(\"Not enough letters!\");\r\n      return;\r\n    }\r\n\r\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\r\n    const targetLetters = targetWord.split(\"\");\r\n    \r\n    for (let i = 0; i < WORD_LENGTH; i++) {\r\n      if (guess[i] === targetWord[i]) {\r\n        newColors[i] = \"green\";\r\n        newStatuses[guess[i]] = 'correct';\r\n        targetLetters[i] = null;\r\n        continue;\r\n      }\r\n      const index = targetLetters.indexOf(guess[i]);\r\n      if (index !== -1) {\r\n        newColors[i] = \"yellow\";\r\n        targetLetters[index] = null;\r\n        if (newStatuses[guess[i]] === 'correct') { continue; } else { newStatuses[guess[i]] = 'present'} ;\r\n      }\r\n      else { newStatuses[guess[i]] = 'absent'; }\r\n    }\r\n\r\n    const newColorBoard = [...colors];\r\n    newColorBoard[currentAttempt] = newColors;\r\n    setColors(newColorBoard);\r\n    setLetterStatuses(newStatuses);\r\n\r\n    if (guess === targetWord) {\r\n      setEmpowering(true);\r\n      wizardRef.current.src = `${selectedWizard.cast}`\r\n      setTimeout(() => {\r\n        setEmpowering(false);\r\n        setSpellVisible(true);\r\n        setMessage(`Spell Successfully Casted! ${selectedWizard.element}`);\r\n      }, 600);\r\n    } else {\r\n      setIncorrectRows([...incorrectRows, currentAttempt]);\r\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\r\n        handleFizzle();\r\n      } else {\r\n        setCurrentAttempt((prev) => prev + 1);\r\n        setCurrentLetterIndex(0);\r\n      }\r\n    } \r\n  };\r\n  \r\n  return (\r\n    <div className=\"solo-game-container\">\r\n      <div className=\"game-header\">\r\n        <div className=\"spell-counter\">Room Id: {roomId}</div>\r\n        <button className=\"exit\" onClick={onExit}>Leave</button>\r\n      </div>\r\n      <div className = \"game-container\">\r\n        <div className=\"game-box\">\r\n          <div className=\"status-header\">\r\n            <p className=\"username\" ref={gameBoxRef}>{username} - {hp} HP</p>\r\n            <p className=\"readyBtn\" ref={readyBtnRef} style={{ display: \"none\", backgroundColor: ready ? '#6aaa64' : '#444' }} onClick={handleReady}>Ready</p>\r\n            <p className=\"message\" ref={msgRef} style={{ display: `none`}}>{message}</p>\r\n            <div className =\"banner\">\r\n              <img src={`${selectedWizard.gif}`} alt=\"Wizard\" className=\"wizard-icon\" ref={wizardRef}/>\r\n              <img\r\n                src={spellExploded ? \"./images/explode.png\" : selectedWizard.spell} alt=\"Wizard-spell\"\r\n                className={`wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`}\r\n                style={{ visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\" }}\r\n              />\r\n              <img src={ enemyWizardImageMini } ref={imgRef} alt=\"dummy\" className=\"training-dummy\" style={{ display: `none`, transform: `ScaleX(-1)` }}/>\r\n              <img\r\n                src={enemySpellExploded ? \"./images/explode.png\" : enemySpell} alt=\"Wizard-spell-enemy\"\r\n                className={`enemy-spell ${enemySpellVisible ? \"enemy-spell-active\" : \"\"}`}\r\n                style={{ visibility: enemySpellVisible || enemySpellExploded ? \"visible\" : \"hidden\" }}\r\n              />\r\n            </div>\r\n            <div className=\"timer-bar-container\">\r\n              <div className={`timer-bar ${timer <= 10 ? \"danger\" : timer <= 30 ? \"warning\" : \"\"}`} style={{ width: `${(timer / STARTING_TIME) * 100}%` }} />\r\n            </div>\r\n          </div>\r\n          <div className=\"wordle-board\">\r\n            {board.map((row, rowIndex) => (\r\n              <div key={rowIndex} className=\"wordle-row\">\r\n                {row.map((letter, colIndex) => (\r\n                  <div\r\n                    key={colIndex}\r\n                    className={`wordle-tile ${colors[rowIndex][colIndex]}`}>\r\n                    {letter}\r\n                  </div>\r\n                ))}\r\n                <span\r\n                  ref={(el) => (elementRefs.current[rowIndex] = el)}\r\n                  className={`row-element ${empowering && rowIndex > currentAttempt ? \"empowering-icon\" : \"\"}`}>\r\n                  {incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"info-container\">\r\n          <h2> {gameStart ? `${opponentUsername} - ${enemyhp} HP` :  \r\n          opponentUsername ? `${opponentUsername} - ${opponentReady ? \"Ready\" : \"Not Ready\"}` : \"Waiting for another player...\"\r\n          }\r\n          </h2>\r\n          <img src={enemyWizardImage} alt=\"Enemy-Dummy\" className=\"enemy-image\" style={{ transform: `ScaleX(-1)` }}/>\r\n          <img src=\"./images/explode.png\" alt=\"Enemy-explode\" className=\"explosion\" \r\n          style={{ visibility: spellExploded ? \"visible\" : \"hidden\" }}/>\r\n          <div className=\"enemy-health-bar\">\r\n            <div className=\"enemy-hp\" style={{ width: `${(enemyhp/ STARTING_HP) * 100}%` }}></div>\r\n          </div>\r\n          <hr className=\"divider\" />\r\n          <div className=\"keyboard-preview\">\r\n            {keyboardRows.map((row, rowIndex) => (\r\n              <div key={rowIndex} className=\"keyboard-row\">\r\n                {row.map((letter) => (\r\n                  <button\r\n                    key={letter}\r\n                    className={`key ${letterStatuses[letter] || ''}`}\r\n                    disabled>\r\n                    {letter}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}