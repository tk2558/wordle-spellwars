{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\Downloads\\\\wordle-spellwars\\\\client\\\\src\\\\components\\\\pvpGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\nimport \"./gameplay.css\";\nimport wordList from \"../data/wordList.json\";\nimport { socket } from '../socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ATTEMPTS = 6;\nconst WORD_LENGTH = 5;\nconst STARTING_HP = 100;\nconst STARTING_TIME = 60;\nconst ENEMY_HP = 100;\nfunction generateWord(wordList) {\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\n}\nexport default function PvPGame({\n  selectedWizard,\n  username,\n  onExit,\n  roomId\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [currentAttempt, setCurrentAttempt] = useState(0);\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\n  const [enemyhp, setEnemyHP] = useState(ENEMY_HP);\n  const [opponentUsername, setOpponentUsername] = useState(null);\n  const [opponentReady, setOpponentReady] = useState(false);\n  const [enemyWizardImage, setEnemyWizardImage] = useState(\"./images/loading.png\");\n  const [enemyWizardImageMini, setEnemyWizardImageMini] = useState(\"./images/training.png\");\n  const imgRef = useRef(null);\n  const [hp, setHP] = useState(STARTING_HP);\n  const [timer, setTimer] = useState(STARTING_TIME);\n  const [message, setMessage] = useState(\"...\");\n  const [incorrectRows, setIncorrectRows] = useState([]);\n  const [spellVisible, setSpellVisible] = useState(false);\n  const [spellExploded, setSpellExploded] = useState(false);\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\n  const [letterStatuses, setLetterStatuses] = useState({});\n  const [empowering, setEmpowering] = useState(false);\n  const elementRefs = useRef([]);\n  const wizardRef = useRef(null);\n  const gameBoxRef = useRef(null);\n  const bgmRef = useRef(null);\n  const empowerSound = useRef(null);\n  const explodeSound = useRef(null);\n  const fizzleSound = useRef(null);\n  const [ready, setReady] = useState(false);\n  const [gameStart, setGameStart] = useState(false);\n  const readyBtnRef = useRef(null);\n  const msgRef = useRef(null);\n\n  //const [players, setPlayers] = useState([]);\n\n  const handleReady = () => {\n    // Function to reset game \n    setReady(prev => !prev);\n    socket.emit('setPlayerReady', ready, roomId, () => {\n      setHP(STARTING_HP);\n      setTimer(STARTING_TIME);\n      resetRound(true);\n    });\n  };\n  const keyboardRows = useMemo(() => [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], [\"Enter\", 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '✖️']], []);\n  console.log(targetWord);\n  const resetRound = useCallback(success => {\n    setTimer(STARTING_TIME);\n    setCurrentAttempt(0);\n    setCurrentLetterIndex(0);\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setIncorrectRows([]);\n    setSpellVisible(false);\n    setSpellExploded(false);\n    setFizzleTriggered(false);\n    setTargetWord(generateWord(wordList));\n    setLetterStatuses({});\n    if (success) {\n      elementRefs.current.forEach(el => {\n        if (!el) return;\n        const wizardRect = wizardRef.current.getBoundingClientRect();\n        const elRect = el.getBoundingClientRect();\n        const dx = wizardRect.left - elRect.left;\n        const dy = wizardRect.top - elRect.top;\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.opacity = \"1\";\n      });\n      wizardRef.current.src = `${selectedWizard.gif}`;\n    }\n  }, [selectedWizard]);\n  const triggerDamageAnimation = () => {\n    if (!gameBoxRef.current) return;\n    gameBoxRef.current.classList.remove('takeDMG');\n    void gameBoxRef.current.offsetWidth;\n    gameBoxRef.current.classList.add('takeDMG');\n    gameBoxRef.current.addEventListener('animationend', () => {\n      gameBoxRef.current.classList.remove('takeDMG');\n    }, {\n      once: true\n    });\n  };\n  const handleFizzle = useCallback(() => {\n    setMessage(\"Spell Fizzled! Cast a New One!\");\n    fizzleSound.current.play();\n    setHP(prev => Math.max(prev - 10, 0)); // Fizzle Recoil\n    socket.emit('recoil', roomId, () => {});\n    triggerDamageAnimation();\n    setTimeout(() => resetRound(false), 500);\n  }, [resetRound, fizzleSound, roomId]);\n  useEffect(() => {\n    // Keyboard\n    const handleKeyDown = e => {\n      if (!gameStart) {\n        return;\n      }\n      const key = e.key.toUpperCase();\n      if (key === \"BACKSPACE\") {\n        handleBackspace();\n      } else if (key === \"ENTER\") {\n        handleSubmit();\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\n        handleLetterInput(key);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  });\n  useEffect(() => {\n    // Socket\n    socket.emit('getEnemy', roomId, () => {});\n    socket.on('opponentInfo', enemy => {\n      //console.log(enemy);\n      setOpponentUsername(enemy.username);\n      setEnemyWizardImage(enemy.wizard.img);\n      setEnemyWizardImageMini(enemy.wizard.cast);\n      imgRef.current.style.display = 'inline';\n    });\n    socket.on('opponentReady', ready => {\n      setOpponentReady(ready);\n    });\n    socket.on('bothPlayersReady', () => {\n      //console.log(\"GAME STARTED!\")\n      readyBtnRef.current.style.display = 'none';\n      msgRef.current.style.display = 'inline';\n      setMessage(\"Game Start!\");\n      setGameStart(true);\n    });\n    socket.on('takeDmg', () => {\n      setHP(prev => Math.max(prev - 20, 0));\n      triggerDamageAnimation();\n    });\n    socket.on('GameDone', () => {\n      //console.log(\"GAME ENDED!\")\n      setGameStart(false);\n      if (hp <= 0) {\n        setMessage(\"Game Over! You Lose!\");\n      } else {\n        setMessage(\"Game Over! You Win!\");\n      }\n      socket.emit('resetHP', roomId, () => {});\n      setReady(prev => !prev);\n      socket.emit('setPlayerReady', ready, roomId, () => {});\n      readyBtnRef.current.style.display = 'inline';\n      readyBtnRef.current.backgroundColor = '#444';\n    });\n    return () => {\n      socket.off('opponentInfo');\n      socket.off('opponentReady');\n      socket.off('opponentUnready');\n      socket.off('bothPlayersReady');\n      socket.off('takeDmg');\n    };\n  }, [roomId, hp, ready]);\n  useEffect(() => {\n    // Sound Effects\n    empowerSound.current = new Audio('./audio/empower.wav');\n    explodeSound.current = new Audio('./audio/explosion.wav');\n    fizzleSound.current = new Audio('./audio/fizzle.wav');\n    fizzleSound.current.volume = .1;\n  }, [empowerSound, explodeSound, fizzleSound]);\n  useEffect(() => {\n    // Timer\n    if (fizzleTriggered || spellVisible || !gameStart) return;\n    const interval = setInterval(() => {\n      setTimer(prev => {\n        if (prev <= 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prev - 0.1;\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, [fizzleTriggered, spellVisible, gameStart]);\n  useEffect(() => {\n    // Trigger Fizzle ONCE when timer hits 0\n    if (timer <= 0 && gameStart && !fizzleTriggered) {\n      setFizzleTriggered(true);\n      handleFizzle();\n    }\n  }, [timer, gameStart, fizzleTriggered, handleFizzle]);\n  useEffect(() => {\n    // Spell Casted\n    if (!spellVisible) return;\n    const explodeTimeout = setTimeout(() => {\n      setSpellExploded(true);\n      explodeSound.current.play();\n      // if (selectedWizard.id === \"fire-mage\") {setEnemyHP((prev) => prev - 100);} // Test\n      setEnemyHP(prev => prev - 20);\n      socket.emit('dealDmg', roomId, () => {});\n    }, 750); // spell travel time\n\n    const cleanupTimeout = setTimeout(() => {\n      setSpellVisible(false);\n      setSpellExploded(false);\n      resetRound(true);\n    }, 750 + 425);\n    return () => {\n      clearTimeout(explodeTimeout);\n      clearTimeout(cleanupTimeout);\n    };\n  }, [spellVisible, resetRound, explodeSound, selectedWizard, roomId]);\n  useEffect(() => {\n    // Empower Spell\n    if (empowering) {\n      elementRefs.current.forEach(el => {\n        if (!el) return; // el.textContent === \"❌\" to get remaining attempts\n        const wizardRect = wizardRef.current.getBoundingClientRect();\n        const elRect = el.getBoundingClientRect();\n        const dx = wizardRect.left - elRect.left;\n        const dy = wizardRect.top - elRect.top;\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.opacity = \"0\";\n      });\n      empowerSound.current.play();\n    }\n  }, [empowering, empowerSound]);\n  useEffect(() => {\n    // BGM\n    bgmRef.current = new Audio('./audio/bgm.wav');\n    bgmRef.current.loop = true;\n    bgmRef.current.volume = 0.05;\n    bgmRef.current.play().catch(e => {\n      console.log(e);\n    });\n    return () => {\n      // reset when exiting solo\n      bgmRef.current.pause();\n      bgmRef.current.currentTime = 0;\n    };\n  }, [bgmRef]);\n  const handleLetterInput = letter => {\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex] = letter;\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev + 1);\n  };\n  const handleBackspace = () => {\n    if (currentLetterIndex === 0) return;\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev - 1);\n  };\n  const handleSubmit = () => {\n    const newStatuses = {\n      ...letterStatuses\n    };\n    const guess = board[currentAttempt].join(\"\");\n    if (guess.length < WORD_LENGTH) {\n      setMessage(\"Not enough letters!\");\n      return;\n    }\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\n    const targetLetters = targetWord.split(\"\");\n    for (let i = 0; i < WORD_LENGTH; i++) {\n      if (guess[i] === targetWord[i]) {\n        newColors[i] = \"green\";\n        newStatuses[guess[i]] = 'correct';\n        targetLetters[i] = null;\n        continue;\n      }\n      const index = targetLetters.indexOf(guess[i]);\n      if (index !== -1) {\n        newColors[i] = \"yellow\";\n        targetLetters[index] = null;\n        if (newStatuses[guess[i]] === 'correct') {\n          continue;\n        } else {\n          newStatuses[guess[i]] = 'present';\n        }\n        ;\n      } else {\n        newStatuses[guess[i]] = 'absent';\n      }\n    }\n    const newColorBoard = [...colors];\n    newColorBoard[currentAttempt] = newColors;\n    setColors(newColorBoard);\n    setLetterStatuses(newStatuses);\n    if (guess === targetWord) {\n      setEmpowering(true);\n      wizardRef.current.src = `${selectedWizard.cast}`;\n      setTimeout(() => {\n        setEmpowering(false);\n        setSpellVisible(true);\n        setMessage(`Spell Successfully Casted! ${selectedWizard.element}`);\n      }, 600);\n    } else {\n      setIncorrectRows([...incorrectRows, currentAttempt]);\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\n        handleFizzle();\n      } else {\n        setCurrentAttempt(prev => prev + 1);\n        setCurrentLetterIndex(0);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solo-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spell-counter\",\n        children: [\"Room Id: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"exit\",\n        onClick: onExit,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"username\",\n            ref: gameBoxRef,\n            children: [username, \" - \", hp, \" HP\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"readyBtn\",\n            ref: readyBtnRef,\n            style: {\n              backgroundColor: ready ? '#6aaa64' : '#444'\n            },\n            onClick: handleReady,\n            children: \"Ready\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message\",\n            ref: msgRef,\n            style: {\n              display: `none`\n            },\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `${selectedWizard.gif}`,\n              alt: \"Wizard\",\n              className: \"wizard-icon\",\n              ref: wizardRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: spellExploded ? \"./images/explode.png\" : selectedWizard.spell,\n              alt: \"Wizard-spell\",\n              className: `wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`,\n              style: {\n                visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: enemyWizardImageMini,\n              ref: imgRef,\n              alt: \"dummy\",\n              className: \"training-dummy\",\n              style: {\n                display: `none`,\n                transform: `ScaleX(-1)`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-bar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `timer-bar ${timer <= 10 ? \"danger\" : timer <= 30 ? \"warning\" : \"\"}`,\n              style: {\n                width: `${timer / STARTING_TIME * 100}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordle-board\",\n          children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wordle-row\",\n            children: [row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `wordle-tile ${colors[rowIndex][colIndex]}`,\n              children: letter\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              ref: el => elementRefs.current[rowIndex] = el,\n              className: `row-element ${empowering && rowIndex > currentAttempt ? \"empowering-icon\" : \"\"}`,\n              children: incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 17\n            }, this)]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" \", gameStart ? `${opponentUsername} - ${enemyhp} HP` : opponentUsername ? `${opponentUsername} - ${opponentReady ? \"Ready\" : \"Not Ready\"}` : \"Waiting for another player...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: enemyWizardImage,\n          alt: \"Enemy-Dummy\",\n          className: \"enemy-image\",\n          style: {\n            transform: `ScaleX(-1)`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"./images/explode.png\",\n          alt: \"Enemy-explode\",\n          className: \"explosion\",\n          style: {\n            visibility: spellExploded ? \"visible\" : \"hidden\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enemy-health-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"enemy-hp\",\n            style: {\n              width: `${enemyhp / ENEMY_HP * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keyboard-preview\",\n          children: keyboardRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"keyboard-row\",\n            children: row.map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `key ${letterStatuses[letter] || ''}`,\n              disabled: true,\n              children: letter\n            }, letter, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }, this))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n}\n_s(PvPGame, \"ljVW0YfjZpb9nyDuEguLp+7ddUc=\");\n_c = PvPGame;\nvar _c;\n$RefreshReg$(_c, \"PvPGame\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useMemo","wordList","socket","jsxDEV","_jsxDEV","MAX_ATTEMPTS","WORD_LENGTH","STARTING_HP","STARTING_TIME","ENEMY_HP","generateWord","Math","floor","random","length","toUpperCase","PvPGame","selectedWizard","username","onExit","roomId","_s","board","setBoard","Array","fill","map","colors","setColors","currentAttempt","setCurrentAttempt","currentLetterIndex","setCurrentLetterIndex","targetWord","setTargetWord","enemyhp","setEnemyHP","opponentUsername","setOpponentUsername","opponentReady","setOpponentReady","enemyWizardImage","setEnemyWizardImage","enemyWizardImageMini","setEnemyWizardImageMini","imgRef","hp","setHP","timer","setTimer","message","setMessage","incorrectRows","setIncorrectRows","spellVisible","setSpellVisible","spellExploded","setSpellExploded","fizzleTriggered","setFizzleTriggered","letterStatuses","setLetterStatuses","empowering","setEmpowering","elementRefs","wizardRef","gameBoxRef","bgmRef","empowerSound","explodeSound","fizzleSound","ready","setReady","gameStart","setGameStart","readyBtnRef","msgRef","handleReady","prev","emit","resetRound","keyboardRows","console","log","success","current","forEach","el","wizardRect","getBoundingClientRect","elRect","dx","left","dy","top","style","transform","opacity","src","gif","triggerDamageAnimation","classList","remove","offsetWidth","add","addEventListener","once","handleFizzle","play","max","setTimeout","handleKeyDown","e","key","handleBackspace","handleSubmit","test","handleLetterInput","window","removeEventListener","on","enemy","wizard","img","cast","display","backgroundColor","off","Audio","volume","interval","setInterval","clearInterval","explodeTimeout","cleanupTimeout","clearTimeout","loop","catch","pause","currentTime","letter","newBoard","newStatuses","guess","join","newColors","targetLetters","split","i","index","indexOf","newColorBoard","element","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","alt","spell","visibility","width","row","rowIndex","colIndex","includes","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thoma/Downloads/wordle-spellwars/client/src/components/pvpGame.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\r\nimport \"./gameplay.css\";\r\nimport wordList from \"../data/wordList.json\";\r\nimport { socket } from '../socket';\r\n\r\nconst MAX_ATTEMPTS = 6;\r\nconst WORD_LENGTH = 5;\r\nconst STARTING_HP = 100;\r\nconst STARTING_TIME = 60;\r\nconst ENEMY_HP = 100;\r\n\r\nfunction generateWord(wordList) {\r\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\r\n}\r\n\r\nexport default function PvPGame({ selectedWizard, username, onExit, roomId }) {\r\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [currentAttempt, setCurrentAttempt] = useState(0);\r\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\r\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\r\n\r\n  const [enemyhp, setEnemyHP] = useState(ENEMY_HP);\r\n  const [opponentUsername, setOpponentUsername] = useState(null);\r\n  const [opponentReady, setOpponentReady] = useState(false);\r\n  const [enemyWizardImage, setEnemyWizardImage] = useState(\"./images/loading.png\");\r\n  const [enemyWizardImageMini, setEnemyWizardImageMini] = useState(\"./images/training.png\");\r\n  const imgRef = useRef(null);\r\n\r\n  const [hp, setHP] = useState(STARTING_HP);\r\n  const [timer, setTimer] = useState(STARTING_TIME);\r\n  const [message, setMessage] = useState(\"...\");\r\n  const [incorrectRows, setIncorrectRows] = useState([]);\r\n\r\n  const [spellVisible, setSpellVisible] = useState(false);\r\n  const [spellExploded, setSpellExploded] = useState(false);\r\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\r\n  const [letterStatuses, setLetterStatuses] = useState({}); \r\n\r\n  const [empowering, setEmpowering] = useState(false);\r\n  const elementRefs = useRef([]);\r\n  const wizardRef = useRef(null);\r\n  const gameBoxRef = useRef(null);\r\n\r\n  const bgmRef = useRef(null);\r\n  const empowerSound = useRef(null);\r\n  const explodeSound = useRef(null);\r\n  const fizzleSound = useRef(null);\r\n  \r\n  const [ready, setReady] = useState(false);\r\n  const [gameStart, setGameStart] = useState(false);\r\n  const readyBtnRef = useRef(null);\r\n  const msgRef = useRef(null);\r\n\r\n  //const [players, setPlayers] = useState([]);\r\n\r\n  const handleReady = () => { // Function to reset game \r\n    setReady((prev) => !prev);\r\n    socket.emit('setPlayerReady', ready, roomId, () => {\r\n      setHP(STARTING_HP);\r\n      setTimer(STARTING_TIME);\r\n      resetRound(true);\r\n    }); \r\n  };\r\n\r\n  const keyboardRows = useMemo(() => [\r\n    ['Q','W','E','R','T','Y','U','I','O','P'],\r\n    ['A','S','D','F','G','H','J','K','L'],\r\n    [\"Enter\", 'Z','X','C','V','B','N','M', '✖️']\r\n  ], []);\r\n  \r\n  console.log(targetWord);\r\n\r\n  const resetRound = useCallback((success) => {\r\n    setTimer(STARTING_TIME);\r\n    setCurrentAttempt(0);\r\n    setCurrentLetterIndex(0);\r\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setIncorrectRows([]);\r\n    setSpellVisible(false);\r\n    setSpellExploded(false);\r\n    setFizzleTriggered(false);\r\n    setTargetWord(generateWord(wordList));\r\n    setLetterStatuses({});\r\n\r\n    if (success) {\r\n      elementRefs.current.forEach((el) => {\r\n        if (!el) return;\r\n        const wizardRect = wizardRef.current.getBoundingClientRect();\r\n        const elRect = el.getBoundingClientRect();\r\n        const dx = wizardRect.left - elRect.left;\r\n        const dy = wizardRect.top - elRect.top;\r\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\r\n        el.style.opacity = \"1\";\r\n      });\r\n      wizardRef.current.src = `${selectedWizard.gif}`\r\n    }\r\n  }, [selectedWizard]);\r\n\r\n  const triggerDamageAnimation = () => {\r\n    if (!gameBoxRef.current) return;\r\n    gameBoxRef.current.classList.remove('takeDMG');\r\n    void gameBoxRef.current.offsetWidth; \r\n\r\n    gameBoxRef.current.classList.add('takeDMG');\r\n    gameBoxRef.current.addEventListener('animationend', () => {\r\n      gameBoxRef.current.classList.remove('takeDMG');\r\n    }, { once: true });\r\n  };\r\n\r\n  const handleFizzle = useCallback(() => {\r\n    setMessage(\"Spell Fizzled! Cast a New One!\");\r\n    fizzleSound.current.play();\r\n    setHP((prev) => Math.max(prev - 10, 0)); // Fizzle Recoil\r\n    socket.emit('recoil', roomId, () => {}); \r\n    triggerDamageAnimation();\r\n    setTimeout(() => resetRound(false), 500);\r\n  }, [resetRound, fizzleSound, roomId]);\r\n\r\n  useEffect(() => { // Keyboard\r\n    const handleKeyDown = (e) => {\r\n      if (!gameStart) { return; }\r\n      const key = e.key.toUpperCase();\r\n      if (key === \"BACKSPACE\") {\r\n        handleBackspace();\r\n      } else if (key === \"ENTER\") {\r\n        handleSubmit();\r\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\r\n        handleLetterInput(key);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  });\r\n\r\n  useEffect(() => { // Socket\r\n    socket.emit('getEnemy', roomId, () => {}); \r\n    socket.on('opponentInfo', (enemy) => {\r\n      //console.log(enemy);\r\n      setOpponentUsername(enemy.username);\r\n      setEnemyWizardImage(enemy.wizard.img);\r\n      setEnemyWizardImageMini(enemy.wizard.cast);\r\n      imgRef.current.style.display = 'inline';\r\n    });\r\n\r\n    socket.on('opponentReady', (ready) => { setOpponentReady(ready); });\r\n\r\n    socket.on('bothPlayersReady', () => {\r\n      //console.log(\"GAME STARTED!\")\r\n      readyBtnRef.current.style.display = 'none';\r\n      msgRef.current.style.display = 'inline';\r\n      setMessage(\"Game Start!\");\r\n      setGameStart(true);\r\n    });\r\n\r\n    socket.on('takeDmg', () => { \r\n      setHP((prev) => Math.max(prev - 20, 0)) \r\n      triggerDamageAnimation();\r\n    });\r\n\r\n    socket.on('GameDone', () => {\r\n      //console.log(\"GAME ENDED!\")\r\n      setGameStart(false);\r\n\r\n      if (hp <= 0) { setMessage(\"Game Over! You Lose!\"); }\r\n      else { setMessage(\"Game Over! You Win!\"); }\r\n\r\n      socket.emit('resetHP', roomId, () => {}); \r\n      setReady((prev) => !prev);\r\n      socket.emit('setPlayerReady', ready, roomId, () => {}); \r\n      readyBtnRef.current.style.display = 'inline';\r\n      readyBtnRef.current.backgroundColor = '#444';\r\n    });\r\n\r\n    return () => {\r\n      socket.off('opponentInfo');\r\n      socket.off('opponentReady');\r\n      socket.off('opponentUnready');\r\n      socket.off('bothPlayersReady');\r\n      socket.off('takeDmg');\r\n    };\r\n  }, [roomId, hp, ready]);\r\n\r\n  useEffect(() => { // Sound Effects\r\n    empowerSound.current = new Audio('./audio/empower.wav');\r\n    explodeSound.current = new Audio('./audio/explosion.wav');\r\n    fizzleSound.current = new Audio('./audio/fizzle.wav');\r\n    fizzleSound.current.volume = .1;\r\n  }, [empowerSound, explodeSound, fizzleSound]);\r\n\r\n  useEffect(() => { // Timer\r\n    if (fizzleTriggered || spellVisible || !gameStart) return;\r\n    const interval = setInterval(() => {\r\n      setTimer(prev => {\r\n        if (prev <= 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return prev - 0.1;\r\n      });\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [fizzleTriggered, spellVisible, gameStart]);\r\n  \r\n  useEffect(() => { // Trigger Fizzle ONCE when timer hits 0\r\n    if (timer <= 0 && gameStart && !fizzleTriggered) {\r\n      setFizzleTriggered(true);\r\n      handleFizzle();\r\n    }\r\n  }, [timer, gameStart, fizzleTriggered, handleFizzle]);\r\n\r\n  useEffect(() => { // Spell Casted\r\n    if (!spellVisible) return;\r\n    const explodeTimeout = setTimeout(() => {\r\n      setSpellExploded(true);\r\n      explodeSound.current.play();\r\n      // if (selectedWizard.id === \"fire-mage\") {setEnemyHP((prev) => prev - 100);} // Test\r\n      setEnemyHP((prev) => prev - 20);\r\n      socket.emit('dealDmg', roomId, () => {}); \r\n    }, 750); // spell travel time\r\n  \r\n    const cleanupTimeout = setTimeout(() => {\r\n      setSpellVisible(false);\r\n      setSpellExploded(false);\r\n      resetRound(true);\r\n    }, 750 + 425); \r\n\r\n    return () => {\r\n      clearTimeout(explodeTimeout);\r\n      clearTimeout(cleanupTimeout);\r\n    };\r\n  }, [spellVisible, resetRound, explodeSound, selectedWizard, roomId]);\r\n\r\n  useEffect(() => { // Empower Spell\r\n    if (empowering) {\r\n      elementRefs.current.forEach((el) => {\r\n        if (!el) return; // el.textContent === \"❌\" to get remaining attempts\r\n        const wizardRect = wizardRef.current.getBoundingClientRect();\r\n        const elRect = el.getBoundingClientRect();\r\n  \r\n        const dx = wizardRect.left - elRect.left;\r\n        const dy = wizardRect.top - elRect.top;\r\n\r\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\r\n        el.style.opacity = \"0\";\r\n      });\r\n      empowerSound.current.play();\r\n    }\r\n  }, [empowering, empowerSound]);\r\n\r\n  useEffect(() => { // BGM\r\n    bgmRef.current = new Audio('./audio/bgm.wav');\r\n    bgmRef.current.loop = true;\r\n    bgmRef.current.volume = 0.05; \r\n    bgmRef.current.play().catch((e) => {console.log(e);});\r\n    return () => { // reset when exiting solo\r\n      bgmRef.current.pause();\r\n      bgmRef.current.currentTime = 0; \r\n    };\r\n  }, [bgmRef]);\r\n\r\n  const handleLetterInput = (letter) => {\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex] = letter;\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev + 1);\r\n  };\r\n\r\n  const handleBackspace = () => {\r\n    if (currentLetterIndex === 0) return;\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev - 1);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newStatuses = { ...letterStatuses };\r\n    const guess = board[currentAttempt].join(\"\");\r\n    if (guess.length < WORD_LENGTH) {\r\n      setMessage(\"Not enough letters!\");\r\n      return;\r\n    }\r\n\r\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\r\n    const targetLetters = targetWord.split(\"\");\r\n    \r\n    for (let i = 0; i < WORD_LENGTH; i++) {\r\n      if (guess[i] === targetWord[i]) {\r\n        newColors[i] = \"green\";\r\n        newStatuses[guess[i]] = 'correct';\r\n        targetLetters[i] = null;\r\n        continue;\r\n      }\r\n      const index = targetLetters.indexOf(guess[i]);\r\n      if (index !== -1) {\r\n        newColors[i] = \"yellow\";\r\n        targetLetters[index] = null;\r\n        if (newStatuses[guess[i]] === 'correct') { continue; } else { newStatuses[guess[i]] = 'present'} ;\r\n      }\r\n      else { newStatuses[guess[i]] = 'absent'; }\r\n    }\r\n\r\n    const newColorBoard = [...colors];\r\n    newColorBoard[currentAttempt] = newColors;\r\n    setColors(newColorBoard);\r\n    setLetterStatuses(newStatuses);\r\n\r\n    if (guess === targetWord) {\r\n      setEmpowering(true);\r\n      wizardRef.current.src = `${selectedWizard.cast}`\r\n      setTimeout(() => {\r\n        setEmpowering(false);\r\n        setSpellVisible(true);\r\n        setMessage(`Spell Successfully Casted! ${selectedWizard.element}`);\r\n      }, 600);\r\n    } else {\r\n      setIncorrectRows([...incorrectRows, currentAttempt]);\r\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\r\n        handleFizzle();\r\n      } else {\r\n        setCurrentAttempt((prev) => prev + 1);\r\n        setCurrentLetterIndex(0);\r\n      }\r\n    } \r\n  };\r\n  \r\n  return (\r\n    <div className=\"solo-game-container\">\r\n      <div className=\"game-header\">\r\n        <div className=\"spell-counter\">Room Id: {roomId}</div>\r\n        <button className=\"exit\" onClick={onExit}>Leave</button>\r\n      </div>\r\n      <div className = \"game-container\">\r\n        <div className=\"game-box\">\r\n          <div className=\"status-header\">\r\n            <p className=\"username\" ref={gameBoxRef}>{username} - {hp} HP</p>\r\n            <p className=\"readyBtn\" ref={readyBtnRef} style={{ backgroundColor: ready ? '#6aaa64' : '#444' }} onClick={handleReady}>Ready</p>\r\n            <p className=\"message\" ref={msgRef} style={{ display: `none`}}>{message}</p>\r\n            <div className =\"banner\">\r\n              <img src={`${selectedWizard.gif}`} alt=\"Wizard\" className=\"wizard-icon\" ref={wizardRef}/>\r\n              <img\r\n                src={spellExploded ? \"./images/explode.png\" : selectedWizard.spell} alt=\"Wizard-spell\"\r\n                className={`wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`}\r\n                style={{ visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\" }}\r\n              />\r\n              <img src={ enemyWizardImageMini } ref={imgRef} alt=\"dummy\" className=\"training-dummy\" style={{ display: `none`, transform: `ScaleX(-1)` }}/>\r\n            </div>\r\n            <div className=\"timer-bar-container\">\r\n              <div className={`timer-bar ${timer <= 10 ? \"danger\" : timer <= 30 ? \"warning\" : \"\"}`} style={{ width: `${(timer / STARTING_TIME) * 100}%` }} />\r\n            </div>\r\n          </div>\r\n          <div className=\"wordle-board\">\r\n            {board.map((row, rowIndex) => (\r\n              <div key={rowIndex} className=\"wordle-row\">\r\n                {row.map((letter, colIndex) => (\r\n                  <div\r\n                    key={colIndex}\r\n                    className={`wordle-tile ${colors[rowIndex][colIndex]}`}>\r\n                    {letter}\r\n                  </div>\r\n                ))}\r\n                <span\r\n                  ref={(el) => (elementRefs.current[rowIndex] = el)}\r\n                  className={`row-element ${empowering && rowIndex > currentAttempt ? \"empowering-icon\" : \"\"}`}>\r\n                  {incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"info-container\">\r\n          <h2> {gameStart ? `${opponentUsername} - ${enemyhp} HP` :  \r\n          opponentUsername ? `${opponentUsername} - ${opponentReady ? \"Ready\" : \"Not Ready\"}` : \"Waiting for another player...\"\r\n          }\r\n          </h2>\r\n          <img src={enemyWizardImage} alt=\"Enemy-Dummy\" className=\"enemy-image\" style={{ transform: `ScaleX(-1)` }}/>\r\n          <img src=\"./images/explode.png\" alt=\"Enemy-explode\" className=\"explosion\" \r\n          style={{ visibility: spellExploded ? \"visible\" : \"hidden\" }}/>\r\n          <div className=\"enemy-health-bar\">\r\n            <div className=\"enemy-hp\" style={{ width: `${(enemyhp/ ENEMY_HP) * 100}%` }}></div>\r\n          </div>\r\n          <hr className=\"divider\" />\r\n          <div className=\"keyboard-preview\">\r\n            {keyboardRows.map((row, rowIndex) => (\r\n              <div key={rowIndex} className=\"keyboard-row\">\r\n                {row.map((letter) => (\r\n                  <button\r\n                    key={letter}\r\n                    className={`key ${letterStatuses[letter] || ''}`}\r\n                    disabled>\r\n                    {letter}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}