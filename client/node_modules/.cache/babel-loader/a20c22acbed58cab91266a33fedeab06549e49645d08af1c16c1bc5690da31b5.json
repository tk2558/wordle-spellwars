{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\Downloads\\\\wordle-spellwars\\\\src\\\\components\\\\soloGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport \"./soloGame.css\";\nimport wordList from \"../data/wordList.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ATTEMPTS = 6;\nconst WORD_LENGTH = 5;\nconst STARTING_HP = 100;\nconst STARTING_TIME = 60;\nfunction generateWord(wordList) {\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\n}\nexport default function SoloGame({\n  selectedWizard,\n  username,\n  onExit\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n  const [currentAttempt, setCurrentAttempt] = useState(0);\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\n  const [hp, setHP] = useState(STARTING_HP);\n  const [timer, setTimer] = useState(STARTING_TIME);\n  const [message, setMessage] = useState(\"...\");\n  const [gameOver, setGameOver] = useState(false);\n  const [incorrectRows, setIncorrectRows] = useState([]);\n  const [spellVisible, setSpellVisible] = useState(false);\n  const [spellExploded, setSpellExploded] = useState(false);\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\n  const [spellsCast, setSpellsCast] = useState(0);\n  const [letterStatuses, setLetterStatuses] = useState({});\n  const [empowering, setEmpowering] = useState(false);\n  const elementRefs = useRef([]);\n  const wizardRef = useRef(null);\n  const bgmRef = useRef(null);\n  const empowerSound = useRef(null);\n  const explodeSound = useRef(null);\n  const fizzleSound = useRef(null);\n  const keyboardRows = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], [\"Enter\", 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '✖️']];\n  console.log(targetWord);\n  const resetRound = useCallback(success => {\n    if (hp <= 20 && !success) {\n      setGameOver(true);\n      setMessage(\"Game Over!\");\n      return;\n    }\n    setTimer(STARTING_TIME);\n    setCurrentAttempt(0);\n    setCurrentLetterIndex(0);\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\n    setIncorrectRows([]);\n    setSpellVisible(false);\n    setSpellExploded(false);\n    setFizzleTriggered(false);\n    setTargetWord(generateWord(wordList));\n    setLetterStatuses({});\n    if (success) {\n      elementRefs.current.forEach(el => {\n        if (!el) return;\n        const wizardRect = wizardRef.current.getBoundingClientRect();\n        const elRect = el.getBoundingClientRect();\n        const dx = wizardRect.left - elRect.left;\n        const dy = wizardRect.top - elRect.top;\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.opacity = \"1\";\n        wizardRef.current.src = `${selectedWizard.gif}`;\n      });\n    }\n  }, [hp, selectedWizard]);\n  const handleFizzle = useCallback(() => {\n    setMessage(\"Spell Fizzled! Cast a New One!\");\n    fizzleSound.current.play();\n    setHP(prev => Math.max(prev - 20, 0));\n    setTimeout(() => resetRound(false), 500);\n  }, [resetRound, fizzleSound]);\n  useEffect(() => {\n    // Keyboard\n    const handleKeyDown = e => {\n      if (gameOver) return;\n      const key = e.key.toUpperCase();\n      if (key === \"BACKSPACE\") {\n        handleBackspace();\n      } else if (key === \"ENTER\") {\n        handleSubmit();\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\n        handleLetterInput(key);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  });\n  useEffect(() => {\n    // Sound Effects\n    empowerSound.current = new Audio('./audio/empower.wav');\n    explodeSound.current = new Audio('./audio/explosion.wav');\n    fizzleSound.current = new Audio('./audio/fizzle.wav');\n    fizzleSound.current.volume = .1;\n  }, [empowerSound, explodeSound, fizzleSound]);\n  useEffect(() => {\n    // Timer\n    if (gameOver || fizzleTriggered || spellVisible) return;\n    const interval = setInterval(() => {\n      setTimer(prev => {\n        if (prev <= 0) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prev - 0.1;\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, [gameOver, fizzleTriggered, spellVisible]);\n  useEffect(() => {\n    // Trigger Fizzle ONCE when timer hits 0\n    if (timer <= 0 && !gameOver && !fizzleTriggered) {\n      setFizzleTriggered(true);\n      handleFizzle();\n    }\n  }, [timer, gameOver, fizzleTriggered, handleFizzle]);\n  useEffect(() => {\n    // Spell Casted\n    if (!spellVisible) return;\n    const explodeTimeout = setTimeout(() => {\n      setSpellExploded(true);\n      explodeSound.current.play();\n    }, 750); // spell travel time\n\n    const cleanupTimeout = setTimeout(() => {\n      setSpellVisible(false);\n      setSpellExploded(false);\n      resetRound(true);\n    }, 750 + 425);\n    return () => {\n      clearTimeout(explodeTimeout);\n      clearTimeout(cleanupTimeout);\n    };\n  }, [spellVisible, resetRound, explodeSound]);\n  useEffect(() => {\n    // Empower Spell\n    if (empowering) {\n      elementRefs.current.forEach(el => {\n        if (!el) return;\n        const wizardRect = wizardRef.current.getBoundingClientRect();\n        const elRect = el.getBoundingClientRect();\n        const dx = wizardRect.left - elRect.left;\n        const dy = wizardRect.top - elRect.top;\n        el.style.transition = \"transform 0.8s ease-in-out, opacity 0.8s\";\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\n        el.style.opacity = \"0\";\n      });\n      empowerSound.current.play();\n    }\n  }, [empowering, empowerSound]);\n  useEffect(() => {\n    // BGM\n    bgmRef.current = new Audio('./audio/bgm.wav');\n    bgmRef.current.loop = true;\n    bgmRef.current.volume = 0.05;\n    bgmRef.current.play().catch(e => {\n      console.log(e);\n    });\n    return () => {\n      // reset when exiting solo\n      bgmRef.current.pause();\n      bgmRef.current.currentTime = 0;\n    };\n  }, [bgmRef]);\n  const handleLetterInput = letter => {\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex] = letter;\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev + 1);\n  };\n  const handleBackspace = () => {\n    if (currentLetterIndex === 0) return;\n    const newBoard = [...board];\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\n    setBoard(newBoard);\n    setCurrentLetterIndex(prev => prev - 1);\n  };\n  const handleSubmit = () => {\n    const newStatuses = {\n      ...letterStatuses\n    };\n    const guess = board[currentAttempt].join(\"\");\n    if (guess.length < WORD_LENGTH) {\n      setMessage(\"Not enough letters!\");\n      return;\n    }\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\n    const targetLetters = targetWord.split(\"\");\n    for (let i = 0; i < WORD_LENGTH; i++) {\n      if (guess[i] === targetWord[i]) {\n        newColors[i] = \"green\";\n        newStatuses[guess[i]] = 'correct';\n        targetLetters[i] = null;\n        continue;\n      }\n      const index = targetLetters.indexOf(guess[i]);\n      if (index !== -1) {\n        newColors[i] = \"yellow\";\n        newStatuses[guess[i]] = 'present';\n        targetLetters[index] = null;\n      } else {\n        newStatuses[guess[i]] = 'absent';\n      }\n    }\n    const newColorBoard = [...colors];\n    newColorBoard[currentAttempt] = newColors;\n    setColors(newColorBoard);\n    setLetterStatuses(newStatuses);\n    if (guess === targetWord) {\n      setEmpowering(true);\n      wizardRef.current.src = `${selectedWizard.cast}`;\n      setTimeout(() => {\n        setEmpowering(false);\n        setSpellVisible(true);\n        setMessage(`Spell Successfully Casted! ${selectedWizard.element}`);\n        setSpellsCast(prev => prev + 1);\n      }, 600);\n    } else {\n      setIncorrectRows([...incorrectRows, currentAttempt]);\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\n        handleFizzle();\n      } else {\n        setCurrentAttempt(prev => prev + 1);\n        setCurrentLetterIndex(0);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solo-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spell-counter\",\n      children: [\"Spells Casted: \", spellsCast]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"exit\",\n      onClick: onExit,\n      children: \"Leave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"username\",\n          children: [username, \" - \", hp, \" HP\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${selectedWizard.gif}`,\n            alt: \"Wizard\",\n            className: \"wizard-icon\",\n            ref: wizardRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: spellExploded ? \"./images/explode.png\" : selectedWizard.spell,\n            alt: \"Wizard-spell\",\n            className: `wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`,\n            style: {\n              visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `./images/training.png`,\n            alt: \"dummy\",\n            className: \"training-dummy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-bar-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `timer-bar ${timer <= 10 ? \"danger\" : timer <= 30 ? \"warning\" : \"\"}`,\n            style: {\n              width: `${timer / STARTING_TIME * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordle-board\",\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordle-row\",\n          children: [row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `wordle-tile ${colors[rowIndex][colIndex]}`,\n            children: letter\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: el => elementRefs.current[rowIndex] = el,\n            className: `row-element ${empowering && rowIndex > currentAttempt ? \"empowering-icon\" : \"\"}`,\n            children: incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Training Dummy - \\u221E HP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./images/training.png\",\n        alt: \"Enemy-Dummy\",\n        className: \"enemy-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"./images/explode.png\",\n        alt: \"Enemy-explode\",\n        className: \"explosion\",\n        style: {\n          visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-health-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enemy-hp\",\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-preview\",\n        children: keyboardRows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keyboard-row\",\n          children: row.map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `key ${letterStatuses[letter] || ''}`,\n            disabled: true,\n            children: letter\n          }, letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s(SoloGame, \"+W8X1ydvC+fSLx/GFCnRi4eT+6I=\");\n_c = SoloGame;\nvar _c;\n$RefreshReg$(_c, \"SoloGame\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","wordList","jsxDEV","_jsxDEV","MAX_ATTEMPTS","WORD_LENGTH","STARTING_HP","STARTING_TIME","generateWord","Math","floor","random","length","toUpperCase","SoloGame","selectedWizard","username","onExit","_s","board","setBoard","Array","fill","map","colors","setColors","currentAttempt","setCurrentAttempt","currentLetterIndex","setCurrentLetterIndex","targetWord","setTargetWord","hp","setHP","timer","setTimer","message","setMessage","gameOver","setGameOver","incorrectRows","setIncorrectRows","spellVisible","setSpellVisible","spellExploded","setSpellExploded","fizzleTriggered","setFizzleTriggered","spellsCast","setSpellsCast","letterStatuses","setLetterStatuses","empowering","setEmpowering","elementRefs","wizardRef","bgmRef","empowerSound","explodeSound","fizzleSound","keyboardRows","console","log","resetRound","success","current","forEach","el","wizardRect","getBoundingClientRect","elRect","dx","left","dy","top","style","transform","opacity","src","gif","handleFizzle","play","prev","max","setTimeout","handleKeyDown","e","key","handleBackspace","handleSubmit","test","handleLetterInput","window","addEventListener","removeEventListener","Audio","volume","interval","setInterval","clearInterval","explodeTimeout","cleanupTimeout","clearTimeout","transition","loop","catch","pause","currentTime","letter","newBoard","newStatuses","guess","join","newColors","targetLetters","split","i","index","indexOf","newColorBoard","cast","element","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alt","ref","spell","visibility","width","row","rowIndex","colIndex","includes","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thoma/Downloads/wordle-spellwars/src/components/soloGame.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport \"./soloGame.css\";\r\nimport wordList from \"../data/wordList.json\";\r\n\r\nconst MAX_ATTEMPTS = 6;\r\nconst WORD_LENGTH = 5;\r\nconst STARTING_HP = 100;\r\nconst STARTING_TIME = 60;\r\n\r\nfunction generateWord(wordList) {\r\n  return wordList[Math.floor(Math.random() * wordList.length)].toUpperCase();\r\n}\r\n\r\nexport default function SoloGame({ selectedWizard, username, onExit }) {\r\n  const [board, setBoard] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [colors, setColors] = useState(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n  const [currentAttempt, setCurrentAttempt] = useState(0);\r\n  const [currentLetterIndex, setCurrentLetterIndex] = useState(0);\r\n  const [targetWord, setTargetWord] = useState(generateWord(wordList));\r\n  const [hp, setHP] = useState(STARTING_HP);\r\n  const [timer, setTimer] = useState(STARTING_TIME);\r\n  const [message, setMessage] = useState(\"...\");\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [incorrectRows, setIncorrectRows] = useState([]);\r\n\r\n  const [spellVisible, setSpellVisible] = useState(false);\r\n  const [spellExploded, setSpellExploded] = useState(false);\r\n  const [fizzleTriggered, setFizzleTriggered] = useState(false);\r\n  const [spellsCast, setSpellsCast] = useState(0);\r\n  const [letterStatuses, setLetterStatuses] = useState({}); \r\n\r\n  const [empowering, setEmpowering] = useState(false);\r\n  const elementRefs = useRef([]);\r\n  const wizardRef = useRef(null);\r\n\r\n  const bgmRef = useRef(null);\r\n  const empowerSound = useRef(null);\r\n  const explodeSound = useRef(null);\r\n  const fizzleSound = useRef(null);\r\n\r\n  const keyboardRows = [\r\n    ['Q','W','E','R','T','Y','U','I','O','P'],\r\n    ['A','S','D','F','G','H','J','K','L'],\r\n    [\"Enter\", 'Z','X','C','V','B','N','M', '✖️']\r\n  ];\r\n  \r\n  console.log(targetWord);\r\n\r\n  const resetRound = useCallback((success) => {\r\n    if (hp <= 20 && !success) {\r\n      setGameOver(true);\r\n      setMessage(\"Game Over!\");\r\n      return;\r\n    }\r\n    setTimer(STARTING_TIME);\r\n    setCurrentAttempt(0);\r\n    setCurrentLetterIndex(0);\r\n    setBoard(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setColors(Array(MAX_ATTEMPTS).fill(\"\").map(() => Array(WORD_LENGTH).fill(\"\")));\r\n    setIncorrectRows([]);\r\n    setSpellVisible(false);\r\n    setSpellExploded(false);\r\n    setFizzleTriggered(false);\r\n    setTargetWord(generateWord(wordList));\r\n    setLetterStatuses({});\r\n    \r\n    if (success) {\r\n      elementRefs.current.forEach((el) => {\r\n        if (!el) return;\r\n        const wizardRect = wizardRef.current.getBoundingClientRect();\r\n        const elRect = el.getBoundingClientRect();\r\n        const dx = wizardRect.left - elRect.left;\r\n        const dy = wizardRect.top - elRect.top;\r\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\r\n        el.style.opacity = \"1\";\r\n        wizardRef.current.src = `${selectedWizard.gif}`\r\n      });\r\n    }\r\n  }, [hp, selectedWizard]);\r\n\r\n  const handleFizzle = useCallback(() => {\r\n    setMessage(\"Spell Fizzled! Cast a New One!\");\r\n    fizzleSound.current.play();\r\n    setHP((prev) => Math.max(prev - 20, 0));\r\n    setTimeout(() => resetRound(false), 500);\r\n  }, [resetRound, fizzleSound]);\r\n\r\n  useEffect(() => { // Keyboard\r\n    const handleKeyDown = (e) => {\r\n      if (gameOver) return;\r\n      const key = e.key.toUpperCase();\r\n      if (key === \"BACKSPACE\") {\r\n        handleBackspace();\r\n      } else if (key === \"ENTER\") {\r\n        handleSubmit();\r\n      } else if (/^[A-Z]$/.test(key) && currentLetterIndex < WORD_LENGTH) {\r\n        handleLetterInput(key);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  });\r\n\r\n  useEffect(() => { // Sound Effects\r\n    empowerSound.current = new Audio('./audio/empower.wav');\r\n    explodeSound.current = new Audio('./audio/explosion.wav');\r\n    fizzleSound.current = new Audio('./audio/fizzle.wav');\r\n    fizzleSound.current.volume = .1;\r\n  }, [empowerSound, explodeSound, fizzleSound]);\r\n\r\n  useEffect(() => { // Timer\r\n    if (gameOver || fizzleTriggered || spellVisible) return;\r\n    const interval = setInterval(() => {\r\n      setTimer(prev => {\r\n        if (prev <= 0) {\r\n          clearInterval(interval);\r\n          return 0;\r\n        }\r\n        return prev - 0.1;\r\n      });\r\n    }, 100);\r\n    return () => clearInterval(interval);\r\n  }, [gameOver, fizzleTriggered, spellVisible]);\r\n  \r\n  useEffect(() => { // Trigger Fizzle ONCE when timer hits 0\r\n    if (timer <= 0 && !gameOver && !fizzleTriggered) {\r\n      setFizzleTriggered(true);\r\n      handleFizzle();\r\n    }\r\n  }, [timer, gameOver, fizzleTriggered, handleFizzle]);\r\n\r\n  useEffect(() => { // Spell Casted\r\n    if (!spellVisible) return;\r\n    const explodeTimeout = setTimeout(() => {\r\n      setSpellExploded(true);\r\n      explodeSound.current.play();\r\n    }, 750); // spell travel time\r\n  \r\n    const cleanupTimeout = setTimeout(() => {\r\n      setSpellVisible(false);\r\n      setSpellExploded(false);\r\n      resetRound(true);\r\n    }, 750 + 425); \r\n\r\n    return () => {\r\n      clearTimeout(explodeTimeout);\r\n      clearTimeout(cleanupTimeout);\r\n    };\r\n  }, [spellVisible, resetRound, explodeSound]);\r\n\r\n  useEffect(() => { // Empower Spell\r\n    if (empowering) {\r\n      elementRefs.current.forEach((el) => {\r\n        if (!el) return;\r\n  \r\n        const wizardRect = wizardRef.current.getBoundingClientRect();\r\n        const elRect = el.getBoundingClientRect();\r\n  \r\n        const dx = wizardRect.left - elRect.left;\r\n        const dy = wizardRect.top - elRect.top;\r\n  \r\n        el.style.transition = \"transform 0.8s ease-in-out, opacity 0.8s\";\r\n        el.style.transform = `translate(${dx}px, ${dy}px)`;\r\n        el.style.opacity = \"0\";\r\n      });\r\n      empowerSound.current.play();\r\n    }\r\n  }, [empowering, empowerSound]);\r\n\r\n  useEffect(() => { // BGM\r\n    bgmRef.current = new Audio('./audio/bgm.wav');\r\n    bgmRef.current.loop = true;\r\n    bgmRef.current.volume = 0.05; \r\n    bgmRef.current.play().catch((e) => {console.log(e);});\r\n    return () => { // reset when exiting solo\r\n      bgmRef.current.pause();\r\n      bgmRef.current.currentTime = 0; \r\n    };\r\n  }, [bgmRef]);\r\n\r\n  const handleLetterInput = (letter) => {\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex] = letter;\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev + 1);\r\n  };\r\n\r\n  const handleBackspace = () => {\r\n    if (currentLetterIndex === 0) return;\r\n    const newBoard = [...board];\r\n    newBoard[currentAttempt][currentLetterIndex - 1] = \"\";\r\n    setBoard(newBoard);\r\n    setCurrentLetterIndex((prev) => prev - 1);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newStatuses = { ...letterStatuses };\r\n    const guess = board[currentAttempt].join(\"\");\r\n    if (guess.length < WORD_LENGTH) {\r\n      setMessage(\"Not enough letters!\");\r\n      return;\r\n    }\r\n\r\n    const newColors = Array(WORD_LENGTH).fill(\"gray\");\r\n    const targetLetters = targetWord.split(\"\");\r\n\r\n    for (let i = 0; i < WORD_LENGTH; i++) {\r\n      if (guess[i] === targetWord[i]) {\r\n        newColors[i] = \"green\";\r\n        newStatuses[guess[i]] = 'correct';\r\n        targetLetters[i] = null;\r\n        continue;\r\n      }\r\n      const index = targetLetters.indexOf(guess[i]);\r\n      if (index !== -1) {\r\n        newColors[i] = \"yellow\";\r\n        newStatuses[guess[i]] = 'present';\r\n        targetLetters[index] = null;\r\n      }\r\n      else {\r\n        newStatuses[guess[i]] = 'absent';\r\n      }\r\n    }\r\n\r\n    const newColorBoard = [...colors];\r\n    newColorBoard[currentAttempt] = newColors;\r\n    setColors(newColorBoard);\r\n    setLetterStatuses(newStatuses);\r\n\r\n    if (guess === targetWord) {\r\n      setEmpowering(true);\r\n      wizardRef.current.src = `${selectedWizard.cast}`\r\n      setTimeout(() => {\r\n        setEmpowering(false);\r\n        setSpellVisible(true);\r\n        setMessage(`Spell Successfully Casted! ${selectedWizard.element}`);\r\n        setSpellsCast((prev) => prev + 1);\r\n      }, 600);\r\n    } else {\r\n      setIncorrectRows([...incorrectRows, currentAttempt]);\r\n      if (currentAttempt + 1 === MAX_ATTEMPTS) {\r\n        handleFizzle();\r\n      } else {\r\n        setCurrentAttempt((prev) => prev + 1);\r\n        setCurrentLetterIndex(0);\r\n      }\r\n    } \r\n  };\r\n  \r\n  return (\r\n    <div className=\"solo-game-container\">\r\n      <div className=\"spell-counter\">Spells Casted: {spellsCast}</div>\r\n      <button className=\"exit\" onClick={onExit}>Leave</button>\r\n      <div className=\"game-box\">\r\n        <div className=\"status-header\">\r\n          <p className=\"username\">{username} - {hp} HP</p>\r\n          <p className=\"message\">{message}</p>\r\n          <div className =\"banner\">\r\n            <img src={`${selectedWizard.gif}`} alt=\"Wizard\" className=\"wizard-icon\" ref={wizardRef}/>\r\n            <img\r\n              src={spellExploded ? \"./images/explode.png\" : selectedWizard.spell} alt=\"Wizard-spell\"\r\n              className={`wizard-spell ${spellVisible ? \"spell-active\" : \"\"}`}\r\n              style={{ visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\" }}\r\n            />\r\n            <img src={`./images/training.png`} alt=\"dummy\" className=\"training-dummy\" />\r\n          </div>\r\n          <div className=\"timer-bar-container\">\r\n            <div className={`timer-bar ${timer <= 10 ? \"danger\" : timer <= 30 ? \"warning\" : \"\"}`} style={{ width: `${(timer / STARTING_TIME) * 100}%` }} />\r\n          </div>\r\n        </div>\r\n        <div className=\"wordle-board\">\r\n          {board.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"wordle-row\">\r\n              {row.map((letter, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`wordle-tile ${colors[rowIndex][colIndex]}`}\r\n                >\r\n                  {letter}\r\n                </div>\r\n              ))}\r\n              <span\r\n                ref={(el) => (elementRefs.current[rowIndex] = el)}\r\n                className={`row-element ${empowering && rowIndex > currentAttempt ? \"empowering-icon\" : \"\"}`}>\r\n                {incorrectRows.includes(rowIndex) ? \"❌\" : selectedWizard.element}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"info-container\">\r\n        <h2>Training Dummy - ∞ HP</h2>\r\n        <img src=\"./images/training.png\" alt=\"Enemy-Dummy\" className=\"enemy-image\" />\r\n        <img src=\"./images/explode.png\" alt=\"Enemy-explode\" className=\"explosion\" \r\n        style={{ visibility: spellVisible || spellExploded ? \"visible\" : \"hidden\" }}/>\r\n        <div className=\"enemy-health-bar\">\r\n          <div className=\"enemy-hp\" style={{ width: '100%' }}></div>\r\n        </div>\r\n        <hr className=\"divider\" />\r\n        <div className=\"keyboard-preview\">\r\n          {keyboardRows.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"keyboard-row\">\r\n              {row.map((letter) => (\r\n                <button\r\n                  key={letter}\r\n                  className={`key ${letterStatuses[letter] || ''}`}\r\n                  disabled>\r\n                  {letter}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}